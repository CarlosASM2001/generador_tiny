=== Compilando y Ejecutando Programa Extendido ===
Ejecutando compilador...
Resultados guardados en: salida/resultado_compilacion.txt

Contenido del archivo de salida:
================================
token COMENTARIO
token COMENTARIO_LINEA
token GLOBAL
token ID
token SEMI
token GLOBAL
	 declaracion global variable
	 declaracion unica
token ID
token COLON
token ARRAY
token LBRACKET
token NUM
token RBRACKET
token SEMI
token COMENTARIO_LINEA
token FUNCTION
	 declaracion global array
	 secuencia declaraciones
token ID
token LPAREN
token ID
token COLON
token ARRAY
token LBRACKET
token RBRACKET
token COMMA
token ID
token RPAREN
	 lista parametros
token BEGIN
token VAR
token ID
token SEMI
token VAR
	 declaracion variable local
	 sentencia unica
token ID
token SEMI
token ID
	 declaracion variable local
	 secuencia sentencias sin punto y coma
token ASSIGN
token NUM
token SEMI
	 numero entero
	 asignacion variable
	 secuencia sentencias sin punto y coma
token FOR
token ID
token ASSIGN
token NUM
token TO
	 numero entero
token ID
token MINUS
	 identificador
token NUM
token STEP
	 numero entero
	 resta
token NUM
token ID
	 numero entero
token ASSIGN
token ID
token PLUS
	 identificador
token ID
token LBRACKET
token ID
token RBRACKET
	 identificador
token SEMI
	 acceso array
	 suma
	 asignacion variable
	 sentencia unica
token IF
token ID
token LBRACKET
token ID
token RBRACKET
	 identificador
token LT
	 acceso array
token NUM
token THEN
	 numero entero
	 operacion menor
token CONTINUE
token END
	 continue
	 sentencia unica
token SEMI
	 if simple
	 secuencia sentencias
token IF
token ID
token GT
	 identificador
token NUM
token THEN
	 numero entero
	 operacion mayor
token BREAK
token END
	 break
	 sentencia unica
token END
	 if simple
	 secuencia sentencias
token SEMI
	 for con step
	 secuencia sentencias
token RETURN
token ID
token END
	 identificador
	 return con valor
	 secuencia sentencias
token COMENTARIO_LINEA
token BEGIN
	 declaracion funcion con parametros
	 secuencia declaraciones
token VAR
token ID
token SEMI
token VAR
	 declaracion variable local
	 sentencia unica
token ID
token SEMI
token VAR
	 declaracion variable local
	 secuencia sentencias sin punto y coma
token ID
token SEMI
token COMENTARIO_LINEA
token WRITE
	 declaracion variable local
	 secuencia sentencias sin punto y coma
token STRING
token SEMI
	 cadena texto
	 write expresion
	 secuencia sentencias sin punto y coma
token READ
token ID
token SEMI
	 read variable
	 secuencia sentencias
token COMENTARIO_LINEA
token FOR
token ID
token ASSIGN
token NUM
token TO
	 numero entero
token NUM
token STEP
	 numero entero
token NUM
token ID
	 numero entero
token LBRACKET
token ID
token RBRACKET
	 identificador
token ASSIGN
token ID
token TIMES
	 identificador
token NUM
token PLUS
	 numero entero
	 multiplicacion
token NUM
token END
	 numero entero
	 suma
	 asignacion array
	 sentencia unica
token SEMI
	 for con step
	 secuencia sentencias
token COMENTARIO_LINEA
token IF
token ID
token GE
	 identificador
token NUM
token AND
	 numero entero
	 operacion mayor igual
token ID
token LE
	 identificador
token NUM
token THEN
	 numero entero
	 operacion menor igual
	 operacion AND
token WRITE
token STRING
token SEMI
	 cadena texto
	 write expresion
	 sentencia unica
token WRITE
token ID
token SEMI
	 identificador
	 write expresion
	 secuencia sentencias
token COMENTARIO_LINEA
token IF
token ID
token MOD
	 identificador
token NUM
token EQ
	 numero entero
	 modulo
token NUM
token THEN
	 numero entero
	 operacion igual
token WRITE
token STRING
token ELSE
	 cadena texto
	 write expresion
	 sentencia unica
token WRITE
token STRING
token END
	 cadena texto
	 write expresion
	 sentencia unica
token SEMI
	 if-else
	 secuencia sentencias
token COMENTARIO_LINEA
token ID
token ASSIGN
token ID
token POW
	 identificador
token NUM
token SEMI
	 numero entero
	 potencia
	 asignacion variable
	 secuencia sentencias
token WRITE
token STRING
token SEMI
	 cadena texto
	 write expresion
	 secuencia sentencias
token WRITE
token ID
token ELSE
	 identificador
	 write expresion
	 secuencia sentencias
token WRITE
token STRING
token END
	 cadena texto
	 write expresion
	 sentencia unica
token SEMI
	 if-else
	 secuencia sentencias
token COMENTARIO_LINEA
token ID
token ASSIGN
token CALL
token ID
token LPAREN
token ID
token COMMA
	 identificador
token NUM
token RPAREN
	 numero entero
	 lista argumentos
token SEMI
	 llamada funcion en expresion
	 asignacion variable
	 secuencia sentencias
token WRITE
token STRING
token SEMI
	 cadena texto
	 write expresion
	 secuencia sentencias
token WRITE
token ID
token SEMI
	 identificador
	 write expresion
	 secuencia sentencias
token COMENTARIO_LINEA
token IF
token LPAREN
token ID
token GT
	 identificador
token NUM
token RPAREN
	 numero entero
	 operacion mayor
token OR
	 expresion parentesis
token LPAREN
token ID
token LT
	 identificador
token NUM
token RPAREN
	 numero entero
	 operacion menor
token THEN
	 expresion parentesis
	 operacion OR
token WRITE
token STRING
token END
	 cadena texto
	 write expresion
	 sentencia unica
token SEMI
	 if simple
	 secuencia sentencias
token IF
token NOT
token LPAREN
token ID
token NE
	 identificador
token NUM
token RPAREN
	 numero entero
	 operacion diferente
token THEN
	 expresion parentesis
	 operacion NOT
token WRITE
token STRING
token END
	 cadena texto
	 write expresion
	 sentencia unica
token END
	 if simple
	 secuencia sentencias
	 programa principal
	 regla programa completo

IMPRESION DEL AST GENERADO

  Tipo de nodo desconocido
*** Tabla de Simbolos ***
Consegui Key: arr con direccion: 1
Consegui Key: suma_vector con direccion: 2
Consegui Key: total con direccion: 6
Consegui Key: size con direccion: 4
Consegui Key: resultado con direccion: 8
Consegui Key: v con direccion: 3
Consegui Key: num con direccion: 7
Consegui Key: x con direccion: 0
Consegui Key: i con direccion: 5


------ CODIGO OBJETO DEL LENGUAJE TINY GENERADO PARA LA TM ------


*      Compilacion TINY EXTENDIDO para el codigo objeto TM
*      Archivo: programa_extendido.tiny
*      Preludio estandar:
0:       LD       6,0(0)      cargar la maxima direccion desde la localidad 0
1:       ST       0,0(0)      limpio el registro de la localidad 0
*      -> programa
*      -> declaracion: x
*      Declaracion de variable: x (global)
*      <- declaracion
*      -> declaracion: arr
*      Declaracion de array: arr tamaño definido
*      <- declaracion
*      -> funcion: suma_vector
*      === INICIO FUNCION suma_vector ===
2:       ST       0,0(6)      función: guardar frame anterior
*      Procesamiento de parametros
*      -> declaracion: i
*      Declaracion de variable: i (local)
*      <- declaracion
*      -> declaracion: total
*      Declaracion de variable: total (local)
*      <- declaracion
*      -> asignacion
*      -> constante
3:       LDC       0,0(0)      cargar constante: 0
*      <- constante
4:       ST       0,6(5)      asignacion: almaceno el valor para el id total
*      <- asignacion
*      -> for
*      -> constante
5:       LDC       0,0(0)      cargar constante: 0
*      <- constante
6:       ST       0,5(5)      for: inicializar variable i
*      for: inicio del bucle
7:       LD       0,5(5)      for: cargar variable de control
8:       ST       0,-1(6)      for: guardar variable en pila temp
*      -> Operacion: menos
*      -> identificador
9:       LD       0,4(5)      cargar valor de identificador: size
*      <- identificador
10:       ST       0,-2(6)      op: push en la pila tmp el resultado expresion izquierda
*      -> constante
11:       LDC       0,1(0)      cargar constante: 1
*      <- constante
12:       LD       1,-2(6)      op: pop o cargo de la pila el valor izquierdo en AC1
13:       SUB       0,1,0      op: -
*      <- Operacion: menos
14:       LD       1,-1(6)      for: cargar variable de pila temp
15:       SUB       0,1,0      for: variable - valor_final
*      for: salto condicional al final
*      -> asignacion
*      -> Operacion: mas
*      -> identificador
17:       LD       0,6(5)      cargar valor de identificador: total
*      <- identificador
18:       ST       0,-1(6)      op: push en la pila tmp el resultado expresion izquierda
*      -> identificador
*      -> identificador
19:       LD       0,5(5)      cargar valor de identificador: i
*      <- identificador
20:       ADD       0,0,3      identificador array: calcular direccion
21:       LD       0,0(0)      identificador array: cargar valor
*      <- identificador
22:       LD       1,-1(6)      op: pop o cargo de la pila el valor izquierdo en AC1
23:       ADD       0,1,0      op: +
*      <- Operacion: mas
24:       ST       0,6(5)      asignacion: almaceno el valor para el id total
*      <- asignacion
*      -> if
*      -> Operacion: menor
*      -> identificador
*      -> identificador
25:       LD       0,5(5)      cargar valor de identificador: i
*      <- identificador
26:       ADD       0,0,3      identificador array: calcular direccion
27:       LD       0,0(0)      identificador array: cargar valor
*      <- identificador
28:       ST       0,-1(6)      op: push en la pila tmp el resultado expresion izquierda
*      -> constante
29:       LDC       0,0(0)      cargar constante: 0
*      <- constante
30:       LD       1,-1(6)      op: pop o cargo de la pila el valor izquierdo en AC1
31:       SUB       0,1,0      op: <
32:       JLT       0,2(7)      voy dos instrucciones mas alla if verdadero (AC<0)
33:       LDC       0,0(0)      caso de falso (AC=0)
34:       LDA       7,1(7)      Salto incodicional a direccion: PC+1 (es falso evito colocarlo verdadero)
35:       LDC       0,1(0)      caso de verdadero (AC=1)
*      <- Operacion: menor
*      If: el salto hacia el else debe estar aqui
*      -> continue
*      continue: salto al incremento del bucle
*      <- continue
*      If: el salto hacia el final debe estar aqui
36:       JEQ       0,1(7)      if: jmp hacia else
*      <- if
*      -> if
*      -> Operacion: mayor
*      -> identificador
38:       LD       0,6(5)      cargar valor de identificador: total
*      <- identificador
39:       ST       0,-1(6)      op: push en la pila tmp el resultado expresion izquierda
*      -> constante
40:       LDC       0,1000(0)      cargar constante: 1000
*      <- constante
41:       LD       1,-1(6)      op: pop o cargo de la pila el valor izquierdo en AC1
42:       SUB       0,1,0      op: >
43:       JGT       0,2(7)      saltar si AC>0
44:       LDC       0,0(0)      caso falso
45:       LDA       7,1(7)      saltar caso verdadero
46:       LDC       0,1(0)      caso verdadero
*      <- Operacion: mayor
*      If: el salto hacia el else debe estar aqui
*      -> break
*      break: salto al final del bucle
*      <- break
*      If: el salto hacia el final debe estar aqui
47:       JEQ       0,1(7)      if: jmp hacia else
*      <- if
*      for: punto de continue
49:       LD       0,5(5)      for: cargar variable para incremento
50:       ST       0,-1(6)      for: guardar variable en pila temp
*      -> constante
51:       LDC       0,1(0)      cargar constante: 1
*      <- constante
52:       LD       1,-1(6)      for: cargar variable de pila temp
53:       ADD       0,1,0      for: incrementar variable
54:       ST       0,5(5)      for: guardar variable incrementada
55:       LDA       7,-49(7)      for: salto al inicio
*      for: fin del bucle
16:       JGT       0,39(7)      for: saltar si variable > final
*      <- for
*      -> return
*      -> identificador
56:       LD       0,6(5)      cargar valor de identificador: total
*      <- identificador
57:       LD       1,0(6)      return: restaurar frame
58:       LD       7,0(1)      return: salto a direccion de retorno
*      <- return
*      Return implicito de funcion
59:       LD       0,1(6)      función: restaurar frame anterior
60:       LD       7,0(0)      función: retorno
*      === FIN FUNCION suma_vector ===
*      <- funcion
*      -> declaracion: i
*      Declaracion de variable: i (local)
*      <- declaracion
*      -> declaracion: num
*      Declaracion de variable: num (local)
*      <- declaracion
*      -> declaracion: resultado
*      Declaracion de variable: resultado (local)
*      <- declaracion
*      -> escribir
*      -> string
*      String: "Ingrese un número: "
61:       LDC       0,73(0)      string: cargar caracter 'I'
62:       OUT       0,0,0      string: escribir caracter
63:       LDC       0,110(0)      string: cargar caracter 'n'
64:       OUT       0,0,0      string: escribir caracter
65:       LDC       0,103(0)      string: cargar caracter 'g'
66:       OUT       0,0,0      string: escribir caracter
67:       LDC       0,114(0)      string: cargar caracter 'r'
68:       OUT       0,0,0      string: escribir caracter
69:       LDC       0,101(0)      string: cargar caracter 'e'
70:       OUT       0,0,0      string: escribir caracter
71:       LDC       0,115(0)      string: cargar caracter 's'
72:       OUT       0,0,0      string: escribir caracter
73:       LDC       0,101(0)      string: cargar caracter 'e'
74:       OUT       0,0,0      string: escribir caracter
75:       LDC       0,32(0)      string: cargar caracter ' '
76:       OUT       0,0,0      string: escribir caracter
77:       LDC       0,117(0)      string: cargar caracter 'u'
78:       OUT       0,0,0      string: escribir caracter
79:       LDC       0,110(0)      string: cargar caracter 'n'
80:       OUT       0,0,0      string: escribir caracter
81:       LDC       0,32(0)      string: cargar caracter ' '
82:       OUT       0,0,0      string: escribir caracter
83:       LDC       0,110(0)      string: cargar caracter 'n'
84:       OUT       0,0,0      string: escribir caracter
85:       LDC       0,250(0)      string: cargar caracter 'ú'
86:       OUT       0,0,0      string: escribir caracter
87:       LDC       0,109(0)      string: cargar caracter 'm'
88:       OUT       0,0,0      string: escribir caracter
89:       LDC       0,101(0)      string: cargar caracter 'e'
90:       OUT       0,0,0      string: escribir caracter
91:       LDC       0,114(0)      string: cargar caracter 'r'
92:       OUT       0,0,0      string: escribir caracter
93:       LDC       0,111(0)      string: cargar caracter 'o'
94:       OUT       0,0,0      string: escribir caracter
95:       LDC       0,58(0)      string: cargar caracter ':'
96:       OUT       0,0,0      string: escribir caracter
97:       LDC       0,32(0)      string: cargar caracter ' '
98:       OUT       0,0,0      string: escribir caracter
*      <- string
99:       OUT       0,0,0      escribir: genero la salida de la expresion
*      <- escribir
*      -> leer
100:       IN       0,0,0      leer: lee un valor entero 
101:       ST       0,7(5)      leer: almaceno el valor entero leido en el id num
*      <- leer
*      -> for
*      -> constante
102:       LDC       0,0(0)      cargar constante: 0
*      <- constante
103:       ST       0,5(5)      for: inicializar variable i
*      for: inicio del bucle
104:       LD       0,5(5)      for: cargar variable de control
105:       ST       0,1(6)      for: guardar variable en pila temp
*      -> constante
106:       LDC       0,9(0)      cargar constante: 9
*      <- constante
107:       LD       1,1(6)      for: cargar variable de pila temp
108:       SUB       0,1,0      for: variable - valor_final
*      for: salto condicional al final
*      -> asignacion
*      -> Operacion: mas
*      -> Operacion: por
*      -> identificador
110:       LD       0,5(5)      cargar valor de identificador: i
*      <- identificador
111:       ST       0,1(6)      op: push en la pila tmp el resultado expresion izquierda
*      -> constante
112:       LDC       0,2(0)      cargar constante: 2
*      <- constante
113:       LD       1,1(6)      op: pop o cargo de la pila el valor izquierdo en AC1
114:       MUL       0,1,0      op: *
*      <- Operacion: por
115:       ST       0,1(6)      op: push en la pila tmp el resultado expresion izquierda
*      -> constante
116:       LDC       0,1(0)      cargar constante: 1
*      <- constante
117:       LD       1,1(6)      op: pop o cargo de la pila el valor izquierdo en AC1
118:       ADD       0,1,0      op: +
*      <- Operacion: mas
119:       ST       0,1(6)      asignacion array: guardar valor
*      -> identificador
120:       LD       0,5(5)      cargar valor de identificador: i
*      <- identificador
121:       ADD       0,0,1      asignacion array: calcular direccion
122:       LD       1,1(6)      asignacion array: recuperar valor
123:       ST       1,0(0)      asignacion array: almacenar en posicion calculada
*      <- asignacion
*      for: punto de continue
124:       LD       0,5(5)      for: cargar variable para incremento
125:       ST       0,1(6)      for: guardar variable en pila temp
*      -> constante
126:       LDC       0,1(0)      cargar constante: 1
*      <- constante
127:       LD       1,1(6)      for: cargar variable de pila temp
128:       ADD       0,1,0      for: incrementar variable
129:       ST       0,5(5)      for: guardar variable incrementada
130:       LDA       7,-27(7)      for: salto al inicio
*      for: fin del bucle
109:       JGT       0,21(7)      for: saltar si variable > final
*      <- for
*      -> if
*      -> Operacion: and
*      -> Operacion: mayorigual
*      -> identificador
131:       LD       0,7(5)      cargar valor de identificador: num
*      <- identificador
132:       ST       0,1(6)      op: push en la pila tmp el resultado expresion izquierda
*      -> constante
133:       LDC       0,0(0)      cargar constante: 0
*      <- constante
134:       LD       1,1(6)      op: pop o cargo de la pila el valor izquierdo en AC1
135:       SUB       0,1,0      op: >=
136:       JGE       0,2(7)      saltar si AC>=0
137:       LDC       0,0(0)      caso falso
138:       LDA       7,1(7)      saltar caso verdadero
139:       LDC       0,1(0)      caso verdadero
*      <- Operacion: mayorigual
140:       ST       0,1(6)      op: push en la pila tmp el resultado expresion izquierda
*      -> Operacion: menorigual
*      -> identificador
141:       LD       0,7(5)      cargar valor de identificador: num
*      <- identificador
142:       ST       0,0(6)      op: push en la pila tmp el resultado expresion izquierda
*      -> constante
143:       LDC       0,10(0)      cargar constante: 10
*      <- constante
144:       LD       1,0(6)      op: pop o cargo de la pila el valor izquierdo en AC1
145:       SUB       0,1,0      op: <=
146:       JLE       0,2(7)      saltar si AC<=0
147:       LDC       0,0(0)      caso falso
148:       LDA       7,1(7)      saltar caso verdadero
149:       LDC       0,1(0)      caso verdadero
*      <- Operacion: menorigual
150:       LD       1,1(6)      op: pop o cargo de la pila el valor izquierdo en AC1
151:       JEQ       1,3(7)      and: si izquierdo es falso, resultado es falso
152:       JEQ       0,2(7)      and: si derecho es falso, resultado es falso
153:       LDC       0,1(0)      and: ambos verdaderos
154:       LDA       7,1(7)      and: saltar caso falso
155:       LDC       0,0(0)      and: resultado falso
*      <- Operacion: and
*      If: el salto hacia el else debe estar aqui
*      -> escribir
*      -> string
*      String: "El número está en rango"
157:       LDC       0,69(0)      string: cargar caracter 'E'
158:       OUT       0,0,0      string: escribir caracter
159:       LDC       0,108(0)      string: cargar caracter 'l'
160:       OUT       0,0,0      string: escribir caracter
161:       LDC       0,32(0)      string: cargar caracter ' '
162:       OUT       0,0,0      string: escribir caracter
163:       LDC       0,110(0)      string: cargar caracter 'n'
164:       OUT       0,0,0      string: escribir caracter
165:       LDC       0,250(0)      string: cargar caracter 'ú'
166:       OUT       0,0,0      string: escribir caracter
167:       LDC       0,109(0)      string: cargar caracter 'm'
168:       OUT       0,0,0      string: escribir caracter
169:       LDC       0,101(0)      string: cargar caracter 'e'
170:       OUT       0,0,0      string: escribir caracter
171:       LDC       0,114(0)      string: cargar caracter 'r'
172:       OUT       0,0,0      string: escribir caracter
173:       LDC       0,111(0)      string: cargar caracter 'o'
174:       OUT       0,0,0      string: escribir caracter
175:       LDC       0,32(0)      string: cargar caracter ' '
176:       OUT       0,0,0      string: escribir caracter
177:       LDC       0,101(0)      string: cargar caracter 'e'
178:       OUT       0,0,0      string: escribir caracter
179:       LDC       0,115(0)      string: cargar caracter 's'
180:       OUT       0,0,0      string: escribir caracter
181:       LDC       0,116(0)      string: cargar caracter 't'
182:       OUT       0,0,0      string: escribir caracter
183:       LDC       0,225(0)      string: cargar caracter 'á'
184:       OUT       0,0,0      string: escribir caracter
185:       LDC       0,32(0)      string: cargar caracter ' '
186:       OUT       0,0,0      string: escribir caracter
187:       LDC       0,101(0)      string: cargar caracter 'e'
188:       OUT       0,0,0      string: escribir caracter
189:       LDC       0,110(0)      string: cargar caracter 'n'
190:       OUT       0,0,0      string: escribir caracter
191:       LDC       0,32(0)      string: cargar caracter ' '
192:       OUT       0,0,0      string: escribir caracter
193:       LDC       0,114(0)      string: cargar caracter 'r'
194:       OUT       0,0,0      string: escribir caracter
195:       LDC       0,97(0)      string: cargar caracter 'a'
196:       OUT       0,0,0      string: escribir caracter
197:       LDC       0,110(0)      string: cargar caracter 'n'
198:       OUT       0,0,0      string: escribir caracter
199:       LDC       0,103(0)      string: cargar caracter 'g'
200:       OUT       0,0,0      string: escribir caracter
201:       LDC       0,111(0)      string: cargar caracter 'o'
202:       OUT       0,0,0      string: escribir caracter
*      <- string
203:       OUT       0,0,0      escribir: genero la salida de la expresion
*      <- escribir
*      -> escribir
*      -> identificador
204:       LD       0,7(5)      cargar valor de identificador: num
*      <- identificador
205:       OUT       0,0,0      escribir: genero la salida de la expresion
*      <- escribir
*      -> if
*      -> Operacion: igual
*      -> Operacion: modulo
*      -> identificador
206:       LD       0,7(5)      cargar valor de identificador: num
*      <- identificador
207:       ST       0,1(6)      op: push en la pila tmp el resultado expresion izquierda
*      -> constante
208:       LDC       0,2(0)      cargar constante: 2
*      <- constante
209:       LD       1,1(6)      op: pop o cargo de la pila el valor izquierdo en AC1
210:       ST       0,1(6)      mod: guardar b
211:       ST       1,0(6)      mod: guardar a
212:       DIV       0,1,0      mod: a/b
213:       LD       1,0(6)      mod: recuperar a
214:       LD       2,1(6)      mod: recuperar b en r2
215:       MUL       0,0,2      mod: (a/b)*b
216:       SUB       0,1,0      mod: a - (a/b)*b
*      <- Operacion: modulo
217:       ST       0,1(6)      op: push en la pila tmp el resultado expresion izquierda
*      -> constante
218:       LDC       0,0(0)      cargar constante: 0
*      <- constante
219:       LD       1,1(6)      op: pop o cargo de la pila el valor izquierdo en AC1
220:       SUB       0,1,0      op: ==
221:       JEQ       0,2(7)      voy dos instrucciones mas alla if verdadero (AC==0)
222:       LDC       0,0(0)      caso de falso (AC=0)
223:       LDA       7,1(7)      Salto incodicional a direccion: PC+1 (es falso evito colocarlo verdadero)
224:       LDC       0,1(0)      caso de verdadero (AC=1)
*      <- Operacion: igual
*      If: el salto hacia el else debe estar aqui
*      -> escribir
*      -> string
*      String: "El número es par"
226:       LDC       0,69(0)      string: cargar caracter 'E'
227:       OUT       0,0,0      string: escribir caracter
228:       LDC       0,108(0)      string: cargar caracter 'l'
229:       OUT       0,0,0      string: escribir caracter
230:       LDC       0,32(0)      string: cargar caracter ' '
231:       OUT       0,0,0      string: escribir caracter
232:       LDC       0,110(0)      string: cargar caracter 'n'
233:       OUT       0,0,0      string: escribir caracter
234:       LDC       0,250(0)      string: cargar caracter 'ú'
235:       OUT       0,0,0      string: escribir caracter
236:       LDC       0,109(0)      string: cargar caracter 'm'
237:       OUT       0,0,0      string: escribir caracter
238:       LDC       0,101(0)      string: cargar caracter 'e'
239:       OUT       0,0,0      string: escribir caracter
240:       LDC       0,114(0)      string: cargar caracter 'r'
241:       OUT       0,0,0      string: escribir caracter
242:       LDC       0,111(0)      string: cargar caracter 'o'
243:       OUT       0,0,0      string: escribir caracter
244:       LDC       0,32(0)      string: cargar caracter ' '
245:       OUT       0,0,0      string: escribir caracter
246:       LDC       0,101(0)      string: cargar caracter 'e'
247:       OUT       0,0,0      string: escribir caracter
248:       LDC       0,115(0)      string: cargar caracter 's'
249:       OUT       0,0,0      string: escribir caracter
250:       LDC       0,32(0)      string: cargar caracter ' '
251:       OUT       0,0,0      string: escribir caracter
252:       LDC       0,112(0)      string: cargar caracter 'p'
253:       OUT       0,0,0      string: escribir caracter
254:       LDC       0,97(0)      string: cargar caracter 'a'
255:       OUT       0,0,0      string: escribir caracter
256:       LDC       0,114(0)      string: cargar caracter 'r'
257:       OUT       0,0,0      string: escribir caracter
*      <- string
258:       OUT       0,0,0      escribir: genero la salida de la expresion
*      <- escribir
*      If: el salto hacia el final debe estar aqui
225:       JEQ       0,34(7)      if: jmp hacia else
*      -> escribir
*      -> string
*      String: "El número es impar"
260:       LDC       0,69(0)      string: cargar caracter 'E'
261:       OUT       0,0,0      string: escribir caracter
262:       LDC       0,108(0)      string: cargar caracter 'l'
263:       OUT       0,0,0      string: escribir caracter
264:       LDC       0,32(0)      string: cargar caracter ' '
265:       OUT       0,0,0      string: escribir caracter
266:       LDC       0,110(0)      string: cargar caracter 'n'
267:       OUT       0,0,0      string: escribir caracter
268:       LDC       0,250(0)      string: cargar caracter 'ú'
269:       OUT       0,0,0      string: escribir caracter
270:       LDC       0,109(0)      string: cargar caracter 'm'
271:       OUT       0,0,0      string: escribir caracter
272:       LDC       0,101(0)      string: cargar caracter 'e'
273:       OUT       0,0,0      string: escribir caracter
274:       LDC       0,114(0)      string: cargar caracter 'r'
275:       OUT       0,0,0      string: escribir caracter
276:       LDC       0,111(0)      string: cargar caracter 'o'
277:       OUT       0,0,0      string: escribir caracter
278:       LDC       0,32(0)      string: cargar caracter ' '
279:       OUT       0,0,0      string: escribir caracter
280:       LDC       0,101(0)      string: cargar caracter 'e'
281:       OUT       0,0,0      string: escribir caracter
282:       LDC       0,115(0)      string: cargar caracter 's'
283:       OUT       0,0,0      string: escribir caracter
284:       LDC       0,32(0)      string: cargar caracter ' '
285:       OUT       0,0,0      string: escribir caracter
286:       LDC       0,105(0)      string: cargar caracter 'i'
287:       OUT       0,0,0      string: escribir caracter
288:       LDC       0,109(0)      string: cargar caracter 'm'
289:       OUT       0,0,0      string: escribir caracter
290:       LDC       0,112(0)      string: cargar caracter 'p'
291:       OUT       0,0,0      string: escribir caracter
292:       LDC       0,97(0)      string: cargar caracter 'a'
293:       OUT       0,0,0      string: escribir caracter
294:       LDC       0,114(0)      string: cargar caracter 'r'
295:       OUT       0,0,0      string: escribir caracter
*      <- string
296:       OUT       0,0,0      escribir: genero la salida de la expresion
*      <- escribir
259:       LDA       7,37(7)      if: jmp hacia el final
*      <- if
*      -> asignacion
*      -> Operacion: potencia
*      -> identificador
297:       LD       0,7(5)      cargar valor de identificador: num
*      <- identificador
298:       ST       0,1(6)      op: push en la pila tmp el resultado expresion izquierda
*      -> constante
299:       LDC       0,2(0)      cargar constante: 2
*      <- constante
300:       LD       1,1(6)      op: pop o cargo de la pila el valor izquierdo en AC1
*      potencia: implementación simplificada
301:       MUL       0,1,0      potencia: multiplicación simple
*      <- Operacion: potencia
302:       ST       0,0(5)      asignacion: almaceno el valor para el id x
*      <- asignacion
*      -> escribir
*      -> string
*      String: "El cuadrado es: "
303:       LDC       0,69(0)      string: cargar caracter 'E'
304:       OUT       0,0,0      string: escribir caracter
305:       LDC       0,108(0)      string: cargar caracter 'l'
306:       OUT       0,0,0      string: escribir caracter
307:       LDC       0,32(0)      string: cargar caracter ' '
308:       OUT       0,0,0      string: escribir caracter
309:       LDC       0,99(0)      string: cargar caracter 'c'
310:       OUT       0,0,0      string: escribir caracter
311:       LDC       0,117(0)      string: cargar caracter 'u'
312:       OUT       0,0,0      string: escribir caracter
313:       LDC       0,97(0)      string: cargar caracter 'a'
314:       OUT       0,0,0      string: escribir caracter
315:       LDC       0,100(0)      string: cargar caracter 'd'
316:       OUT       0,0,0      string: escribir caracter
317:       LDC       0,114(0)      string: cargar caracter 'r'
318:       OUT       0,0,0      string: escribir caracter
319:       LDC       0,97(0)      string: cargar caracter 'a'
320:       OUT       0,0,0      string: escribir caracter
321:       LDC       0,100(0)      string: cargar caracter 'd'
322:       OUT       0,0,0      string: escribir caracter
323:       LDC       0,111(0)      string: cargar caracter 'o'
324:       OUT       0,0,0      string: escribir caracter
325:       LDC       0,32(0)      string: cargar caracter ' '
326:       OUT       0,0,0      string: escribir caracter
327:       LDC       0,101(0)      string: cargar caracter 'e'
328:       OUT       0,0,0      string: escribir caracter
329:       LDC       0,115(0)      string: cargar caracter 's'
330:       OUT       0,0,0      string: escribir caracter
331:       LDC       0,58(0)      string: cargar caracter ':'
332:       OUT       0,0,0      string: escribir caracter
333:       LDC       0,32(0)      string: cargar caracter ' '
334:       OUT       0,0,0      string: escribir caracter
*      <- string
335:       OUT       0,0,0      escribir: genero la salida de la expresion
*      <- escribir
*      -> escribir
*      -> identificador
336:       LD       0,0(5)      cargar valor de identificador: x
*      <- identificador
337:       OUT       0,0,0      escribir: genero la salida de la expresion
*      <- escribir
*      If: el salto hacia el final debe estar aqui
156:       JEQ       0,182(7)      if: jmp hacia else
*      -> escribir
*      -> string
*      String: "Número fuera de rango"
339:       LDC       0,78(0)      string: cargar caracter 'N'
340:       OUT       0,0,0      string: escribir caracter
341:       LDC       0,250(0)      string: cargar caracter 'ú'
342:       OUT       0,0,0      string: escribir caracter
343:       LDC       0,109(0)      string: cargar caracter 'm'
344:       OUT       0,0,0      string: escribir caracter
345:       LDC       0,101(0)      string: cargar caracter 'e'
346:       OUT       0,0,0      string: escribir caracter
347:       LDC       0,114(0)      string: cargar caracter 'r'
348:       OUT       0,0,0      string: escribir caracter
349:       LDC       0,111(0)      string: cargar caracter 'o'
350:       OUT       0,0,0      string: escribir caracter
351:       LDC       0,32(0)      string: cargar caracter ' '
352:       OUT       0,0,0      string: escribir caracter
353:       LDC       0,102(0)      string: cargar caracter 'f'
354:       OUT       0,0,0      string: escribir caracter
355:       LDC       0,117(0)      string: cargar caracter 'u'
356:       OUT       0,0,0      string: escribir caracter
357:       LDC       0,101(0)      string: cargar caracter 'e'
358:       OUT       0,0,0      string: escribir caracter
359:       LDC       0,114(0)      string: cargar caracter 'r'
360:       OUT       0,0,0      string: escribir caracter
361:       LDC       0,97(0)      string: cargar caracter 'a'
362:       OUT       0,0,0      string: escribir caracter
363:       LDC       0,32(0)      string: cargar caracter ' '
364:       OUT       0,0,0      string: escribir caracter
365:       LDC       0,100(0)      string: cargar caracter 'd'
366:       OUT       0,0,0      string: escribir caracter
367:       LDC       0,101(0)      string: cargar caracter 'e'
368:       OUT       0,0,0      string: escribir caracter
369:       LDC       0,32(0)      string: cargar caracter ' '
370:       OUT       0,0,0      string: escribir caracter
371:       LDC       0,114(0)      string: cargar caracter 'r'
372:       OUT       0,0,0      string: escribir caracter
373:       LDC       0,97(0)      string: cargar caracter 'a'
374:       OUT       0,0,0      string: escribir caracter
375:       LDC       0,110(0)      string: cargar caracter 'n'
376:       OUT       0,0,0      string: escribir caracter
377:       LDC       0,103(0)      string: cargar caracter 'g'
378:       OUT       0,0,0      string: escribir caracter
379:       LDC       0,111(0)      string: cargar caracter 'o'
380:       OUT       0,0,0      string: escribir caracter
*      <- string
381:       OUT       0,0,0      escribir: genero la salida de la expresion
*      <- escribir
338:       LDA       7,43(7)      if: jmp hacia el final
*      <- if
*      -> asignacion
*      -> llamada funcion: suma_vector
382:       ST       7,1(6)      call: guardar direccion de retorno
*      Procesando argumentos de la llamada
*      -> identificador
383:       LD       0,1(5)      cargar valor de identificador: arr
*      <- identificador
*      -> constante
384:       LDC       0,10(0)      cargar constante: 10
*      <- constante
385:       ST       0,0(6)      call: guardar argumento
*      -> constante
386:       LDC       0,10(0)      cargar constante: 10
*      <- constante
387:       ST       0,-1(6)      call: guardar argumento
*      Llamada a funcion suma_vector (implementación simplificada)
*      <- llamada funcion
388:       ST       0,8(5)      asignacion: almaceno el valor para el id resultado
*      <- asignacion
*      -> escribir
*      -> string
*      String: "La suma del vector es: "
389:       LDC       0,76(0)      string: cargar caracter 'L'
390:       OUT       0,0,0      string: escribir caracter
391:       LDC       0,97(0)      string: cargar caracter 'a'
392:       OUT       0,0,0      string: escribir caracter
393:       LDC       0,32(0)      string: cargar caracter ' '
394:       OUT       0,0,0      string: escribir caracter
395:       LDC       0,115(0)      string: cargar caracter 's'
396:       OUT       0,0,0      string: escribir caracter
397:       LDC       0,117(0)      string: cargar caracter 'u'
398:       OUT       0,0,0      string: escribir caracter
399:       LDC       0,109(0)      string: cargar caracter 'm'
400:       OUT       0,0,0      string: escribir caracter
401:       LDC       0,97(0)      string: cargar caracter 'a'
402:       OUT       0,0,0      string: escribir caracter
403:       LDC       0,32(0)      string: cargar caracter ' '
404:       OUT       0,0,0      string: escribir caracter
405:       LDC       0,100(0)      string: cargar caracter 'd'
406:       OUT       0,0,0      string: escribir caracter
407:       LDC       0,101(0)      string: cargar caracter 'e'
408:       OUT       0,0,0      string: escribir caracter
409:       LDC       0,108(0)      string: cargar caracter 'l'
410:       OUT       0,0,0      string: escribir caracter
411:       LDC       0,32(0)      string: cargar caracter ' '
412:       OUT       0,0,0      string: escribir caracter
413:       LDC       0,118(0)      string: cargar caracter 'v'
414:       OUT       0,0,0      string: escribir caracter
415:       LDC       0,101(0)      string: cargar caracter 'e'
416:       OUT       0,0,0      string: escribir caracter
417:       LDC       0,99(0)      string: cargar caracter 'c'
418:       OUT       0,0,0      string: escribir caracter
419:       LDC       0,116(0)      string: cargar caracter 't'
420:       OUT       0,0,0      string: escribir caracter
421:       LDC       0,111(0)      string: cargar caracter 'o'
422:       OUT       0,0,0      string: escribir caracter
423:       LDC       0,114(0)      string: cargar caracter 'r'
424:       OUT       0,0,0      string: escribir caracter
425:       LDC       0,32(0)      string: cargar caracter ' '
426:       OUT       0,0,0      string: escribir caracter
427:       LDC       0,101(0)      string: cargar caracter 'e'
428:       OUT       0,0,0      string: escribir caracter
429:       LDC       0,115(0)      string: cargar caracter 's'
430:       OUT       0,0,0      string: escribir caracter
431:       LDC       0,58(0)      string: cargar caracter ':'
432:       OUT       0,0,0      string: escribir caracter
433:       LDC       0,32(0)      string: cargar caracter ' '
434:       OUT       0,0,0      string: escribir caracter
*      <- string
435:       OUT       0,0,0      escribir: genero la salida de la expresion
*      <- escribir
*      -> escribir
*      -> identificador
436:       LD       0,8(5)      cargar valor de identificador: resultado
*      <- identificador
437:       OUT       0,0,0      escribir: genero la salida de la expresion
*      <- escribir
*      -> if
*      -> Operacion: or
*      -> Operacion: mayor
*      -> identificador
438:       LD       0,7(5)      cargar valor de identificador: num
*      <- identificador
439:       ST       0,-2(6)      op: push en la pila tmp el resultado expresion izquierda
*      -> constante
440:       LDC       0,5(0)      cargar constante: 5
*      <- constante
441:       LD       1,-2(6)      op: pop o cargo de la pila el valor izquierdo en AC1
442:       SUB       0,1,0      op: >
443:       JGT       0,2(7)      saltar si AC>0
444:       LDC       0,0(0)      caso falso
445:       LDA       7,1(7)      saltar caso verdadero
446:       LDC       0,1(0)      caso verdadero
*      <- Operacion: mayor
447:       ST       0,-2(6)      op: push en la pila tmp el resultado expresion izquierda
*      -> Operacion: menor
*      -> identificador
448:       LD       0,7(5)      cargar valor de identificador: num
*      <- identificador
449:       ST       0,-3(6)      op: push en la pila tmp el resultado expresion izquierda
*      -> constante
450:       LDC       0,0(0)      cargar constante: 0
*      <- constante
451:       LD       1,-3(6)      op: pop o cargo de la pila el valor izquierdo en AC1
452:       SUB       0,1,0      op: <
453:       JLT       0,2(7)      voy dos instrucciones mas alla if verdadero (AC<0)
454:       LDC       0,0(0)      caso de falso (AC=0)
455:       LDA       7,1(7)      Salto incodicional a direccion: PC+1 (es falso evito colocarlo verdadero)
456:       LDC       0,1(0)      caso de verdadero (AC=1)
*      <- Operacion: menor
457:       LD       1,-2(6)      op: pop o cargo de la pila el valor izquierdo en AC1
458:       JNE       1,3(7)      or: si izquierdo es verdadero, resultado es verdadero
459:       JNE       0,2(7)      or: si derecho es verdadero, resultado es verdadero
460:       LDC       0,0(0)      or: ambos falsos
461:       LDA       7,1(7)      or: saltar caso verdadero
462:       LDC       0,1(0)      or: resultado verdadero
*      <- Operacion: or
*      If: el salto hacia el else debe estar aqui
*      -> escribir
*      -> string
*      String: "Condición compleja verdadera"
464:       LDC       0,67(0)      string: cargar caracter 'C'
465:       OUT       0,0,0      string: escribir caracter
466:       LDC       0,111(0)      string: cargar caracter 'o'
467:       OUT       0,0,0      string: escribir caracter
468:       LDC       0,110(0)      string: cargar caracter 'n'
469:       OUT       0,0,0      string: escribir caracter
470:       LDC       0,100(0)      string: cargar caracter 'd'
471:       OUT       0,0,0      string: escribir caracter
472:       LDC       0,105(0)      string: cargar caracter 'i'
473:       OUT       0,0,0      string: escribir caracter
474:       LDC       0,99(0)      string: cargar caracter 'c'
475:       OUT       0,0,0      string: escribir caracter
476:       LDC       0,105(0)      string: cargar caracter 'i'
477:       OUT       0,0,0      string: escribir caracter
478:       LDC       0,243(0)      string: cargar caracter 'ó'
479:       OUT       0,0,0      string: escribir caracter
480:       LDC       0,110(0)      string: cargar caracter 'n'
481:       OUT       0,0,0      string: escribir caracter
482:       LDC       0,32(0)      string: cargar caracter ' '
483:       OUT       0,0,0      string: escribir caracter
484:       LDC       0,99(0)      string: cargar caracter 'c'
485:       OUT       0,0,0      string: escribir caracter
486:       LDC       0,111(0)      string: cargar caracter 'o'
487:       OUT       0,0,0      string: escribir caracter
488:       LDC       0,109(0)      string: cargar caracter 'm'
489:       OUT       0,0,0      string: escribir caracter
490:       LDC       0,112(0)      string: cargar caracter 'p'
491:       OUT       0,0,0      string: escribir caracter
492:       LDC       0,108(0)      string: cargar caracter 'l'
493:       OUT       0,0,0      string: escribir caracter
494:       LDC       0,101(0)      string: cargar caracter 'e'
495:       OUT       0,0,0      string: escribir caracter
496:       LDC       0,106(0)      string: cargar caracter 'j'
497:       OUT       0,0,0      string: escribir caracter
498:       LDC       0,97(0)      string: cargar caracter 'a'
499:       OUT       0,0,0      string: escribir caracter
500:       LDC       0,32(0)      string: cargar caracter ' '
501:       OUT       0,0,0      string: escribir caracter
502:       LDC       0,118(0)      string: cargar caracter 'v'
503:       OUT       0,0,0      string: escribir caracter
504:       LDC       0,101(0)      string: cargar caracter 'e'
505:       OUT       0,0,0      string: escribir caracter
506:       LDC       0,114(0)      string: cargar caracter 'r'
507:       OUT       0,0,0      string: escribir caracter
508:       LDC       0,100(0)      string: cargar caracter 'd'
509:       OUT       0,0,0      string: escribir caracter
510:       LDC       0,97(0)      string: cargar caracter 'a'
511:       OUT       0,0,0      string: escribir caracter
512:       LDC       0,100(0)      string: cargar caracter 'd'
513:       OUT       0,0,0      string: escribir caracter
514:       LDC       0,101(0)      string: cargar caracter 'e'
515:       OUT       0,0,0      string: escribir caracter
516:       LDC       0,114(0)      string: cargar caracter 'r'
517:       OUT       0,0,0      string: escribir caracter
518:       LDC       0,97(0)      string: cargar caracter 'a'
519:       OUT       0,0,0      string: escribir caracter
*      <- string
520:       OUT       0,0,0      escribir: genero la salida de la expresion
*      <- escribir
*      If: el salto hacia el final debe estar aqui
463:       JEQ       0,58(7)      if: jmp hacia else
*      <- if
*      -> if
*      -> Operacion: not
*      -> Operacion: diferente
*      -> identificador
522:       LD       0,7(5)      cargar valor de identificador: num
*      <- identificador
523:       ST       0,-2(6)      op: push en la pila tmp el resultado expresion izquierda
*      -> constante
524:       LDC       0,5(0)      cargar constante: 5
*      <- constante
525:       LD       1,-2(6)      op: pop o cargo de la pila el valor izquierdo en AC1
526:       SUB       0,1,0      op: !=
527:       JNE       0,2(7)      saltar si AC!=0
528:       LDC       0,0(0)      caso falso
529:       LDA       7,1(7)      saltar caso verdadero
530:       LDC       0,1(0)      caso verdadero
*      <- Operacion: diferente
531:       JEQ       0,2(7)      not: saltar si es cero (falso)
532:       LDC       0,0(0)      not: resultado falso
533:       LDA       7,1(7)      not: saltar carga de verdadero
534:       LDC       0,1(0)      not: resultado verdadero
*      <- Operacion: not
*      If: el salto hacia el else debe estar aqui
*      -> escribir
*      -> string
*      String: "El número es 5"
536:       LDC       0,69(0)      string: cargar caracter 'E'
537:       OUT       0,0,0      string: escribir caracter
538:       LDC       0,108(0)      string: cargar caracter 'l'
539:       OUT       0,0,0      string: escribir caracter
540:       LDC       0,32(0)      string: cargar caracter ' '
541:       OUT       0,0,0      string: escribir caracter
542:       LDC       0,110(0)      string: cargar caracter 'n'
543:       OUT       0,0,0      string: escribir caracter
544:       LDC       0,250(0)      string: cargar caracter 'ú'
545:       OUT       0,0,0      string: escribir caracter
546:       LDC       0,109(0)      string: cargar caracter 'm'
547:       OUT       0,0,0      string: escribir caracter
548:       LDC       0,101(0)      string: cargar caracter 'e'
549:       OUT       0,0,0      string: escribir caracter
550:       LDC       0,114(0)      string: cargar caracter 'r'
551:       OUT       0,0,0      string: escribir caracter
552:       LDC       0,111(0)      string: cargar caracter 'o'
553:       OUT       0,0,0      string: escribir caracter
554:       LDC       0,32(0)      string: cargar caracter ' '
555:       OUT       0,0,0      string: escribir caracter
556:       LDC       0,101(0)      string: cargar caracter 'e'
557:       OUT       0,0,0      string: escribir caracter
558:       LDC       0,115(0)      string: cargar caracter 's'
559:       OUT       0,0,0      string: escribir caracter
560:       LDC       0,32(0)      string: cargar caracter ' '
561:       OUT       0,0,0      string: escribir caracter
562:       LDC       0,53(0)      string: cargar caracter '5'
563:       OUT       0,0,0      string: escribir caracter
*      <- string
564:       OUT       0,0,0      escribir: genero la salida de la expresion
*      <- escribir
*      If: el salto hacia el final debe estar aqui
535:       JEQ       0,30(7)      if: jmp hacia else
*      <- if
*      <- programa
*      Fin de la ejecucion.
566:       HALT       0,0,0      


------ FIN DEL CODIGO OBJETO DEL LENGUAJE TINY GENERADO PARA LA TM ------

=== Compilación completada ===
