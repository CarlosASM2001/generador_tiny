token COMENTARIO
token COMENTARIO_LINEA
token GLOBAL
token ID
token SEMI
token GLOBAL
	 declaracion global variable
	 declaracion unica
token ID
token COLON
token ARRAY
token LBRACKET
token NUM
token RBRACKET
token SEMI
token COMENTARIO_LINEA
token FUNCTION
	 declaracion global array
	 secuencia declaraciones
token ID
token LPAREN
token ID
token COLON
token ARRAY
token LBRACKET
token RBRACKET
token COMMA
token ID
token RPAREN
	 lista parametros
token BEGIN
token VAR
token ID
token SEMI
token VAR
	 declaracion variable local
	 sentencia unica
token ID
token SEMI
token ID
	 declaracion variable local
	 secuencia sentencias sin punto y coma
token ASSIGN
token NUM
token SEMI
	 numero entero
	 asignacion variable
	 secuencia sentencias sin punto y coma
token FOR
token ID
token ASSIGN
token NUM
token TO
	 numero entero
token ID
token MINUS
	 identificador
token NUM
token STEP
	 numero entero
	 resta
token NUM
token ID
	 numero entero
token ASSIGN
token ID
token PLUS
	 identificador
token ID
token LBRACKET
token ID
token RBRACKET
	 identificador
token SEMI
	 acceso array
	 suma
	 asignacion variable
	 sentencia unica
token IF
token ID
token LBRACKET
token ID
token RBRACKET
	 identificador
token LT
	 acceso array
token NUM
token THEN
	 numero entero
	 operacion menor
token CONTINUE
token END
	 continue
	 sentencia unica
token SEMI
	 if simple
	 secuencia sentencias
token IF
token ID
token GT
	 identificador
token NUM
token THEN
	 numero entero
	 operacion mayor
token BREAK
token END
	 break
	 sentencia unica
token END
	 if simple
	 secuencia sentencias
token SEMI
	 for con step
	 secuencia sentencias
token RETURN
token ID
token END
	 identificador
	 return con valor
	 secuencia sentencias
token COMENTARIO_LINEA
token BEGIN
	 declaracion funcion con parametros
	 secuencia declaraciones
token VAR
token ID
token SEMI
token VAR
	 declaracion variable local
	 sentencia unica
token ID
token SEMI
token VAR
	 declaracion variable local
	 secuencia sentencias sin punto y coma
token ID
token SEMI
token COMENTARIO_LINEA
token WRITE
	 declaracion variable local
	 secuencia sentencias sin punto y coma
token STRING
token SEMI
	 cadena texto
	 write expresion
	 secuencia sentencias sin punto y coma
token READ
token ID
token SEMI
	 read variable
	 secuencia sentencias
token COMENTARIO_LINEA
token FOR
token ID
token ASSIGN
token NUM
token TO
	 numero entero
token NUM
token STEP
	 numero entero
token NUM
token ID
	 numero entero
token LBRACKET
token ID
token RBRACKET
	 identificador
token ASSIGN
token ID
token TIMES
	 identificador
token NUM
token PLUS
	 numero entero
	 multiplicacion
token NUM
token END
	 numero entero
	 suma
	 asignacion array
	 sentencia unica
token SEMI
	 for con step
	 secuencia sentencias
token COMENTARIO_LINEA
token IF
token ID
token GE
	 identificador
token NUM
token AND
	 numero entero
	 operacion mayor igual
token ID
token LE
	 identificador
token NUM
token THEN
	 numero entero
	 operacion menor igual
	 operacion AND
token WRITE
token STRING
token SEMI
	 cadena texto
	 write expresion
	 sentencia unica
token WRITE
token ID
token SEMI
	 identificador
	 write expresion
	 secuencia sentencias
token COMENTARIO_LINEA
token IF
token ID
token MOD
	 identificador
token NUM
token EQ
	 numero entero
	 modulo
token NUM
token THEN
	 numero entero
	 operacion igual
token WRITE
token STRING
token ELSE
	 cadena texto
	 write expresion
	 sentencia unica
token WRITE
token STRING
token END
	 cadena texto
	 write expresion
	 sentencia unica
token SEMI
	 if-else
	 secuencia sentencias
token COMENTARIO_LINEA
token ID
token ASSIGN
token ID
token POW
	 identificador
token NUM
token SEMI
	 numero entero
	 potencia
	 asignacion variable
	 secuencia sentencias
token WRITE
token STRING
token SEMI
	 cadena texto
	 write expresion
	 secuencia sentencias
token WRITE
token ID
token ELSE
	 identificador
	 write expresion
	 secuencia sentencias
token WRITE
token STRING
token END
	 cadena texto
	 write expresion
	 sentencia unica
token SEMI
	 if-else
	 secuencia sentencias
token COMENTARIO_LINEA
token ID
token ASSIGN
token CALL
token ID
token LPAREN
token ID
token COMMA
	 identificador
token NUM
token RPAREN
	 numero entero
	 lista argumentos
token SEMI
	 llamada funcion en expresion
	 asignacion variable
	 secuencia sentencias
token WRITE
token STRING
token SEMI
	 cadena texto
	 write expresion
	 secuencia sentencias
token WRITE
token ID
token SEMI
	 identificador
	 write expresion
	 secuencia sentencias
token COMENTARIO_LINEA
token IF
token LPAREN
token ID
token GT
	 identificador
token NUM
token RPAREN
	 numero entero
	 operacion mayor
token OR
	 expresion parentesis
token LPAREN
token ID
token LT
	 identificador
token NUM
token RPAREN
	 numero entero
	 operacion menor
token THEN
	 expresion parentesis
	 operacion OR
token WRITE
token STRING
token END
	 cadena texto
	 write expresion
	 sentencia unica
token SEMI
	 if simple
	 secuencia sentencias
token IF
token NOT
token LPAREN
token ID
token NE
	 identificador
token NUM
token RPAREN
	 numero entero
	 operacion diferente
token THEN
	 expresion parentesis
	 operacion NOT
token WRITE
token STRING
token END
	 cadena texto
	 write expresion
	 sentencia unica
token END
	 if simple
	 secuencia sentencias
	 programa principal
	 regla programa completo

IMPRESION DEL AST GENERADO

  Tipo de nodo desconocido
Array arr ocupa 10 posiciones de memoria
*** Tabla de Simbolos ***
Total de posiciones de memoria utilizadas: 18
Variable: arr -> Direccion: 1
Variable: suma_vector -> Direccion: 11
Variable: total -> Direccion: 15
Variable: size -> Direccion: 13
Variable: resultado -> Direccion: 17
Variable: v -> Direccion: 12
Variable: num -> Direccion: 16
Variable: x -> Direccion: 0
Variable: i -> Direccion: 14

Generando código objeto en el archivo: ejemplo_fuente/programa_extendido.tm


------ CODIGO OBJETO DEL LENGUAJE TINY GENERADO PARA LA TM ------


*      Compilacion TINY EXTENDIDO para el codigo objeto TM
*      Archivo: programa_extendido.tiny
*      Preludio estandar:
1:       LD       6,0(0)      cargar la maxima direccion desde la localidad 0
3:       ST       0,0(0)      limpio el registro de la localidad 0
5:       LDC       5,0(0)      GP apunta al inicio de variables globales (direccion 0)
*      Total de memoria reservada para variables: 18 posiciones
*      -> programa
*      -> declaracion: x
*      Declaracion de variable: x (global)
7:       LDC       0,0(0)      global: inicializar variable x a cero
9:       ST       0,0(5)      global: almacenar en direccion 0
*      <- declaracion
*      -> declaracion: arr
*      Declaracion de array: arr tamaño definido
*      -> constante
11:       LDC       0,10(0)      cargar constante: 10
*      <- constante
13:       LDC       0,0(0)      array: inicializar elemento 0 a cero
15:       ST       0,1(5)      array: almacenar en posicion 1
17:       LDC       0,0(0)      array: inicializar elemento 1 a cero
19:       ST       0,2(5)      array: almacenar en posicion 2
21:       LDC       0,0(0)      array: inicializar elemento 2 a cero
23:       ST       0,3(5)      array: almacenar en posicion 3
25:       LDC       0,0(0)      array: inicializar elemento 3 a cero
27:       ST       0,4(5)      array: almacenar en posicion 4
29:       LDC       0,0(0)      array: inicializar elemento 4 a cero
31:       ST       0,5(5)      array: almacenar en posicion 5
33:       LDC       0,0(0)      array: inicializar elemento 5 a cero
35:       ST       0,6(5)      array: almacenar en posicion 6
37:       LDC       0,0(0)      array: inicializar elemento 6 a cero
39:       ST       0,7(5)      array: almacenar en posicion 7
41:       LDC       0,0(0)      array: inicializar elemento 7 a cero
43:       ST       0,8(5)      array: almacenar en posicion 8
45:       LDC       0,0(0)      array: inicializar elemento 8 a cero
47:       ST       0,9(5)      array: almacenar en posicion 9
49:       LDC       0,0(0)      array: inicializar elemento 9 a cero
51:       ST       0,10(5)      array: almacenar en posicion 10
*      <- declaracion
*      -> funcion: suma_vector
*      === INICIO FUNCION suma_vector ===
53:       ST       0,0(6)      función: guardar frame anterior
*      Procesamiento de parametros
*      -> declaracion: i
*      Declaracion de variable: i (local)
55:       LDC       0,0(0)      local: inicializar variable i a cero
57:       ST       0,14(5)      local: almacenar en direccion 14
*      <- declaracion
*      -> declaracion: total
*      Declaracion de variable: total (local)
59:       LDC       0,0(0)      local: inicializar variable total a cero
61:       ST       0,15(5)      local: almacenar en direccion 15
*      <- declaracion
*      -> asignacion
*      -> constante
63:       LDC       0,0(0)      cargar constante: 0
*      <- constante
65:       ST       0,15(5)      asignacion: almaceno el valor para el id total
*      <- asignacion
*      -> for
*      -> constante
67:       LDC       0,0(0)      cargar constante: 0
*      <- constante
69:       ST       0,14(5)      for: inicializar variable i
*      for: inicio del bucle
71:       LD       0,14(5)      for: cargar variable de control
73:       ST       0,-1(6)      for: guardar variable en pila temp
*      -> Operacion: menos
*      -> identificador
75:       LD       0,13(5)      cargar valor de identificador: size
*      <- identificador
77:       ST       0,-2(6)      op: push en la pila tmp el resultado expresion izquierda
*      -> constante
79:       LDC       0,1(0)      cargar constante: 1
*      <- constante
81:       LD       1,-2(6)      op: pop o cargo de la pila el valor izquierdo en AC1
83:       SUB       0,1,0      op: -
*      <- Operacion: menos
85:       LD       1,-1(6)      for: cargar variable de pila temp
87:       SUB       0,1,0      for: variable - valor_final
*      for: salto condicional al final
*      -> asignacion
*      -> Operacion: mas
*      -> identificador
90:       LD       0,15(5)      cargar valor de identificador: total
*      <- identificador
92:       ST       0,-1(6)      op: push en la pila tmp el resultado expresion izquierda
*      -> identificador
*      -> identificador
94:       LD       0,14(5)      cargar valor de identificador: i
*      <- identificador
96:       ADD       0,0,12      identificador array: calcular direccion
98:       LD       0,0(0)      identificador array: cargar valor
*      <- identificador
100:       LD       1,-1(6)      op: pop o cargo de la pila el valor izquierdo en AC1
102:       ADD       0,1,0      op: +
*      <- Operacion: mas
104:       ST       0,15(5)      asignacion: almaceno el valor para el id total
*      <- asignacion
*      -> if
*      -> Operacion: menor
*      -> identificador
*      -> identificador
106:       LD       0,14(5)      cargar valor de identificador: i
*      <- identificador
108:       ADD       0,0,12      identificador array: calcular direccion
110:       LD       0,0(0)      identificador array: cargar valor
*      <- identificador
112:       ST       0,-1(6)      op: push en la pila tmp el resultado expresion izquierda
*      -> constante
114:       LDC       0,0(0)      cargar constante: 0
*      <- constante
116:       LD       1,-1(6)      op: pop o cargo de la pila el valor izquierdo en AC1
118:       SUB       0,1,0      op: <
120:       JLT       0,2(7)      voy dos instrucciones mas alla if verdadero (AC<0)
122:       LDC       0,0(0)      caso de falso (AC=0)
124:       LDA       7,1(7)      Salto incodicional a direccion: PC+1 (es falso evito colocarlo verdadero)
126:       LDC       0,1(0)      caso de verdadero (AC=1)
*      <- Operacion: menor
*      If: el salto hacia el else debe estar aqui
*      -> continue
*      continue: salto al incremento del bucle
*      <- continue
*      If: el salto hacia el final debe estar aqui
127:       JEQ       0,1(7)      if: jmp hacia else
*      <- if
*      -> if
*      -> Operacion: mayor
*      -> identificador
130:       LD       0,15(5)      cargar valor de identificador: total
*      <- identificador
132:       ST       0,-1(6)      op: push en la pila tmp el resultado expresion izquierda
*      -> constante
134:       LDC       0,1000(0)      cargar constante: 1000
*      <- constante
136:       LD       1,-1(6)      op: pop o cargo de la pila el valor izquierdo en AC1
138:       SUB       0,1,0      op: >
140:       JGT       0,2(7)      saltar si AC>0
142:       LDC       0,0(0)      caso falso
144:       LDA       7,1(7)      saltar caso verdadero
146:       LDC       0,1(0)      caso verdadero
*      <- Operacion: mayor
*      If: el salto hacia el else debe estar aqui
*      -> break
*      break: salto al final del bucle
*      <- break
*      If: el salto hacia el final debe estar aqui
147:       JEQ       0,1(7)      if: jmp hacia else
*      <- if
*      for: punto de continue
150:       LD       0,14(5)      for: cargar variable para incremento
152:       ST       0,-1(6)      for: guardar variable en pila temp
*      -> constante
154:       LDC       0,1(0)      cargar constante: 1
*      <- constante
156:       LD       1,-1(6)      for: cargar variable de pila temp
158:       ADD       0,1,0      for: incrementar variable
160:       ST       0,14(5)      for: guardar variable incrementada
161:       LDA       7,-92(7)      for: salto al inicio
*      for: fin del bucle
88:       JGT       0,73(7)      for: saltar si variable > final
*      <- for
*      -> return
*      -> identificador
163:       LD       0,15(5)      cargar valor de identificador: total
*      <- identificador
165:       LD       1,0(6)      return: restaurar frame
167:       LD       7,0(1)      return: salto a direccion de retorno
*      <- return
*      Return implicito de funcion
169:       LD       0,1(6)      función: restaurar frame anterior
171:       LD       7,0(0)      función: retorno
*      === FIN FUNCION suma_vector ===
*      <- funcion
*      -> declaracion: i
*      Declaracion de variable: i (local)
173:       LDC       0,0(0)      local: inicializar variable i a cero
175:       ST       0,14(5)      local: almacenar en direccion 14
*      <- declaracion
*      -> declaracion: num
*      Declaracion de variable: num (local)
177:       LDC       0,0(0)      local: inicializar variable num a cero
179:       ST       0,16(5)      local: almacenar en direccion 16
*      <- declaracion
*      -> declaracion: resultado
*      Declaracion de variable: resultado (local)
181:       LDC       0,0(0)      local: inicializar variable resultado a cero
183:       ST       0,17(5)      local: almacenar en direccion 17
*      <- declaracion
*      -> escribir
*      -> string
*      String: "Ingrese un número: "
185:       LDC       0,73(0)      string: cargar caracter 'I'
187:       OUT       0,0,0      string: escribir caracter
189:       LDC       0,110(0)      string: cargar caracter 'n'
191:       OUT       0,0,0      string: escribir caracter
193:       LDC       0,103(0)      string: cargar caracter 'g'
195:       OUT       0,0,0      string: escribir caracter
197:       LDC       0,114(0)      string: cargar caracter 'r'
199:       OUT       0,0,0      string: escribir caracter
201:       LDC       0,101(0)      string: cargar caracter 'e'
203:       OUT       0,0,0      string: escribir caracter
205:       LDC       0,115(0)      string: cargar caracter 's'
207:       OUT       0,0,0      string: escribir caracter
209:       LDC       0,101(0)      string: cargar caracter 'e'
211:       OUT       0,0,0      string: escribir caracter
213:       LDC       0,32(0)      string: cargar caracter ' '
215:       OUT       0,0,0      string: escribir caracter
217:       LDC       0,117(0)      string: cargar caracter 'u'
219:       OUT       0,0,0      string: escribir caracter
221:       LDC       0,110(0)      string: cargar caracter 'n'
223:       OUT       0,0,0      string: escribir caracter
225:       LDC       0,32(0)      string: cargar caracter ' '
227:       OUT       0,0,0      string: escribir caracter
229:       LDC       0,110(0)      string: cargar caracter 'n'
231:       OUT       0,0,0      string: escribir caracter
233:       LDC       0,250(0)      string: cargar caracter 'ú'
235:       OUT       0,0,0      string: escribir caracter
237:       LDC       0,109(0)      string: cargar caracter 'm'
239:       OUT       0,0,0      string: escribir caracter
241:       LDC       0,101(0)      string: cargar caracter 'e'
243:       OUT       0,0,0      string: escribir caracter
245:       LDC       0,114(0)      string: cargar caracter 'r'
247:       OUT       0,0,0      string: escribir caracter
249:       LDC       0,111(0)      string: cargar caracter 'o'
251:       OUT       0,0,0      string: escribir caracter
253:       LDC       0,58(0)      string: cargar caracter ':'
255:       OUT       0,0,0      string: escribir caracter
257:       LDC       0,32(0)      string: cargar caracter ' '
259:       OUT       0,0,0      string: escribir caracter
*      <- string
261:       OUT       0,0,0      escribir: genero la salida de la expresion
*      <- escribir
*      -> leer
263:       IN       0,0,0      leer: lee un valor entero 
265:       ST       0,16(5)      leer: almaceno el valor entero leido en el id num
*      <- leer
*      -> for
*      -> constante
267:       LDC       0,0(0)      cargar constante: 0
*      <- constante
269:       ST       0,14(5)      for: inicializar variable i
*      for: inicio del bucle
271:       LD       0,14(5)      for: cargar variable de control
273:       ST       0,1(6)      for: guardar variable en pila temp
*      -> constante
275:       LDC       0,9(0)      cargar constante: 9
*      <- constante
277:       LD       1,1(6)      for: cargar variable de pila temp
279:       SUB       0,1,0      for: variable - valor_final
*      for: salto condicional al final
*      -> asignacion
*      -> Operacion: mas
*      -> Operacion: por
*      -> identificador
282:       LD       0,14(5)      cargar valor de identificador: i
*      <- identificador
284:       ST       0,1(6)      op: push en la pila tmp el resultado expresion izquierda
*      -> constante
286:       LDC       0,2(0)      cargar constante: 2
*      <- constante
288:       LD       1,1(6)      op: pop o cargo de la pila el valor izquierdo en AC1
290:       MUL       0,1,0      op: *
*      <- Operacion: por
292:       ST       0,1(6)      op: push en la pila tmp el resultado expresion izquierda
*      -> constante
294:       LDC       0,1(0)      cargar constante: 1
*      <- constante
296:       LD       1,1(6)      op: pop o cargo de la pila el valor izquierdo en AC1
298:       ADD       0,1,0      op: +
*      <- Operacion: mas
300:       ST       0,1(6)      asignacion array: guardar valor
*      -> identificador
302:       LD       0,14(5)      cargar valor de identificador: i
*      <- identificador
304:       ADD       0,0,1      asignacion array: calcular direccion
306:       LD       1,1(6)      asignacion array: recuperar valor
308:       ST       1,0(0)      asignacion array: almacenar en posicion calculada
*      <- asignacion
*      for: punto de continue
310:       LD       0,14(5)      for: cargar variable para incremento
312:       ST       0,1(6)      for: guardar variable en pila temp
*      -> constante
314:       LDC       0,1(0)      cargar constante: 1
*      <- constante
316:       LD       1,1(6)      for: cargar variable de pila temp
318:       ADD       0,1,0      for: incrementar variable
320:       ST       0,14(5)      for: guardar variable incrementada
321:       LDA       7,-52(7)      for: salto al inicio
*      for: fin del bucle
280:       JGT       0,41(7)      for: saltar si variable > final
*      <- for
*      -> if
*      -> Operacion: and
*      -> Operacion: mayorigual
*      -> identificador
323:       LD       0,16(5)      cargar valor de identificador: num
*      <- identificador
325:       ST       0,1(6)      op: push en la pila tmp el resultado expresion izquierda
*      -> constante
327:       LDC       0,0(0)      cargar constante: 0
*      <- constante
329:       LD       1,1(6)      op: pop o cargo de la pila el valor izquierdo en AC1
331:       SUB       0,1,0      op: >=
333:       JGE       0,2(7)      saltar si AC>=0
335:       LDC       0,0(0)      caso falso
337:       LDA       7,1(7)      saltar caso verdadero
339:       LDC       0,1(0)      caso verdadero
*      <- Operacion: mayorigual
341:       ST       0,1(6)      op: push en la pila tmp el resultado expresion izquierda
*      -> Operacion: menorigual
*      -> identificador
343:       LD       0,16(5)      cargar valor de identificador: num
*      <- identificador
345:       ST       0,0(6)      op: push en la pila tmp el resultado expresion izquierda
*      -> constante
347:       LDC       0,10(0)      cargar constante: 10
*      <- constante
349:       LD       1,0(6)      op: pop o cargo de la pila el valor izquierdo en AC1
351:       SUB       0,1,0      op: <=
353:       JLE       0,2(7)      saltar si AC<=0
355:       LDC       0,0(0)      caso falso
357:       LDA       7,1(7)      saltar caso verdadero
359:       LDC       0,1(0)      caso verdadero
*      <- Operacion: menorigual
361:       LD       1,1(6)      op: pop o cargo de la pila el valor izquierdo en AC1
363:       JEQ       1,3(7)      and: si izquierdo es falso, resultado es falso
365:       JEQ       0,2(7)      and: si derecho es falso, resultado es falso
367:       LDC       0,1(0)      and: ambos verdaderos
369:       LDA       7,1(7)      and: saltar caso falso
371:       LDC       0,0(0)      and: resultado falso
*      <- Operacion: and
*      If: el salto hacia el else debe estar aqui
*      -> escribir
*      -> string
*      String: "El número está en rango"
374:       LDC       0,69(0)      string: cargar caracter 'E'
376:       OUT       0,0,0      string: escribir caracter
378:       LDC       0,108(0)      string: cargar caracter 'l'
380:       OUT       0,0,0      string: escribir caracter
382:       LDC       0,32(0)      string: cargar caracter ' '
384:       OUT       0,0,0      string: escribir caracter
386:       LDC       0,110(0)      string: cargar caracter 'n'
388:       OUT       0,0,0      string: escribir caracter
390:       LDC       0,250(0)      string: cargar caracter 'ú'
392:       OUT       0,0,0      string: escribir caracter
394:       LDC       0,109(0)      string: cargar caracter 'm'
396:       OUT       0,0,0      string: escribir caracter
398:       LDC       0,101(0)      string: cargar caracter 'e'
400:       OUT       0,0,0      string: escribir caracter
402:       LDC       0,114(0)      string: cargar caracter 'r'
404:       OUT       0,0,0      string: escribir caracter
406:       LDC       0,111(0)      string: cargar caracter 'o'
408:       OUT       0,0,0      string: escribir caracter
410:       LDC       0,32(0)      string: cargar caracter ' '
412:       OUT       0,0,0      string: escribir caracter
414:       LDC       0,101(0)      string: cargar caracter 'e'
416:       OUT       0,0,0      string: escribir caracter
418:       LDC       0,115(0)      string: cargar caracter 's'
420:       OUT       0,0,0      string: escribir caracter
422:       LDC       0,116(0)      string: cargar caracter 't'
424:       OUT       0,0,0      string: escribir caracter
426:       LDC       0,225(0)      string: cargar caracter 'á'
428:       OUT       0,0,0      string: escribir caracter
430:       LDC       0,32(0)      string: cargar caracter ' '
432:       OUT       0,0,0      string: escribir caracter
434:       LDC       0,101(0)      string: cargar caracter 'e'
436:       OUT       0,0,0      string: escribir caracter
438:       LDC       0,110(0)      string: cargar caracter 'n'
440:       OUT       0,0,0      string: escribir caracter
442:       LDC       0,32(0)      string: cargar caracter ' '
444:       OUT       0,0,0      string: escribir caracter
446:       LDC       0,114(0)      string: cargar caracter 'r'
448:       OUT       0,0,0      string: escribir caracter
450:       LDC       0,97(0)      string: cargar caracter 'a'
452:       OUT       0,0,0      string: escribir caracter
454:       LDC       0,110(0)      string: cargar caracter 'n'
456:       OUT       0,0,0      string: escribir caracter
458:       LDC       0,103(0)      string: cargar caracter 'g'
460:       OUT       0,0,0      string: escribir caracter
462:       LDC       0,111(0)      string: cargar caracter 'o'
464:       OUT       0,0,0      string: escribir caracter
*      <- string
466:       OUT       0,0,0      escribir: genero la salida de la expresion
*      <- escribir
*      -> escribir
*      -> identificador
468:       LD       0,16(5)      cargar valor de identificador: num
*      <- identificador
470:       OUT       0,0,0      escribir: genero la salida de la expresion
*      <- escribir
*      -> if
*      -> Operacion: igual
*      -> Operacion: modulo
*      -> identificador
472:       LD       0,16(5)      cargar valor de identificador: num
*      <- identificador
474:       ST       0,1(6)      op: push en la pila tmp el resultado expresion izquierda
*      -> constante
476:       LDC       0,2(0)      cargar constante: 2
*      <- constante
478:       LD       1,1(6)      op: pop o cargo de la pila el valor izquierdo en AC1
480:       ST       0,1(6)      mod: guardar b
482:       ST       1,0(6)      mod: guardar a
484:       DIV       0,1,0      mod: a/b
486:       LD       1,0(6)      mod: recuperar a
488:       LD       2,1(6)      mod: recuperar b en r2
490:       MUL       0,0,2      mod: (a/b)*b
492:       SUB       0,1,0      mod: a - (a/b)*b
*      <- Operacion: modulo
494:       ST       0,1(6)      op: push en la pila tmp el resultado expresion izquierda
*      -> constante
496:       LDC       0,0(0)      cargar constante: 0
*      <- constante
498:       LD       1,1(6)      op: pop o cargo de la pila el valor izquierdo en AC1
500:       SUB       0,1,0      op: ==
502:       JEQ       0,2(7)      voy dos instrucciones mas alla if verdadero (AC==0)
504:       LDC       0,0(0)      caso de falso (AC=0)
506:       LDA       7,1(7)      Salto incodicional a direccion: PC+1 (es falso evito colocarlo verdadero)
508:       LDC       0,1(0)      caso de verdadero (AC=1)
*      <- Operacion: igual
*      If: el salto hacia el else debe estar aqui
*      -> escribir
*      -> string
*      String: "El número es par"
511:       LDC       0,69(0)      string: cargar caracter 'E'
513:       OUT       0,0,0      string: escribir caracter
515:       LDC       0,108(0)      string: cargar caracter 'l'
517:       OUT       0,0,0      string: escribir caracter
519:       LDC       0,32(0)      string: cargar caracter ' '
521:       OUT       0,0,0      string: escribir caracter
523:       LDC       0,110(0)      string: cargar caracter 'n'
525:       OUT       0,0,0      string: escribir caracter
527:       LDC       0,250(0)      string: cargar caracter 'ú'
529:       OUT       0,0,0      string: escribir caracter
531:       LDC       0,109(0)      string: cargar caracter 'm'
533:       OUT       0,0,0      string: escribir caracter
535:       LDC       0,101(0)      string: cargar caracter 'e'
537:       OUT       0,0,0      string: escribir caracter
539:       LDC       0,114(0)      string: cargar caracter 'r'
541:       OUT       0,0,0      string: escribir caracter
543:       LDC       0,111(0)      string: cargar caracter 'o'
545:       OUT       0,0,0      string: escribir caracter
547:       LDC       0,32(0)      string: cargar caracter ' '
549:       OUT       0,0,0      string: escribir caracter
551:       LDC       0,101(0)      string: cargar caracter 'e'
553:       OUT       0,0,0      string: escribir caracter
555:       LDC       0,115(0)      string: cargar caracter 's'
557:       OUT       0,0,0      string: escribir caracter
559:       LDC       0,32(0)      string: cargar caracter ' '
561:       OUT       0,0,0      string: escribir caracter
563:       LDC       0,112(0)      string: cargar caracter 'p'
565:       OUT       0,0,0      string: escribir caracter
567:       LDC       0,97(0)      string: cargar caracter 'a'
569:       OUT       0,0,0      string: escribir caracter
571:       LDC       0,114(0)      string: cargar caracter 'r'
573:       OUT       0,0,0      string: escribir caracter
*      <- string
575:       OUT       0,0,0      escribir: genero la salida de la expresion
*      <- escribir
*      If: el salto hacia el final debe estar aqui
509:       JEQ       0,67(7)      if: jmp hacia else
*      -> escribir
*      -> string
*      String: "El número es impar"
578:       LDC       0,69(0)      string: cargar caracter 'E'
580:       OUT       0,0,0      string: escribir caracter
582:       LDC       0,108(0)      string: cargar caracter 'l'
584:       OUT       0,0,0      string: escribir caracter
586:       LDC       0,32(0)      string: cargar caracter ' '
588:       OUT       0,0,0      string: escribir caracter
590:       LDC       0,110(0)      string: cargar caracter 'n'
592:       OUT       0,0,0      string: escribir caracter
594:       LDC       0,250(0)      string: cargar caracter 'ú'
596:       OUT       0,0,0      string: escribir caracter
598:       LDC       0,109(0)      string: cargar caracter 'm'
600:       OUT       0,0,0      string: escribir caracter
602:       LDC       0,101(0)      string: cargar caracter 'e'
604:       OUT       0,0,0      string: escribir caracter
606:       LDC       0,114(0)      string: cargar caracter 'r'
608:       OUT       0,0,0      string: escribir caracter
610:       LDC       0,111(0)      string: cargar caracter 'o'
612:       OUT       0,0,0      string: escribir caracter
614:       LDC       0,32(0)      string: cargar caracter ' '
616:       OUT       0,0,0      string: escribir caracter
618:       LDC       0,101(0)      string: cargar caracter 'e'
620:       OUT       0,0,0      string: escribir caracter
622:       LDC       0,115(0)      string: cargar caracter 's'
624:       OUT       0,0,0      string: escribir caracter
626:       LDC       0,32(0)      string: cargar caracter ' '
628:       OUT       0,0,0      string: escribir caracter
630:       LDC       0,105(0)      string: cargar caracter 'i'
632:       OUT       0,0,0      string: escribir caracter
634:       LDC       0,109(0)      string: cargar caracter 'm'
636:       OUT       0,0,0      string: escribir caracter
638:       LDC       0,112(0)      string: cargar caracter 'p'
640:       OUT       0,0,0      string: escribir caracter
642:       LDC       0,97(0)      string: cargar caracter 'a'
644:       OUT       0,0,0      string: escribir caracter
646:       LDC       0,114(0)      string: cargar caracter 'r'
648:       OUT       0,0,0      string: escribir caracter
*      <- string
650:       OUT       0,0,0      escribir: genero la salida de la expresion
*      <- escribir
576:       LDA       7,74(7)      if: jmp hacia el final
*      <- if
*      -> asignacion
*      -> Operacion: potencia
*      -> identificador
652:       LD       0,16(5)      cargar valor de identificador: num
*      <- identificador
654:       ST       0,1(6)      op: push en la pila tmp el resultado expresion izquierda
*      -> constante
656:       LDC       0,2(0)      cargar constante: 2
*      <- constante
658:       LD       1,1(6)      op: pop o cargo de la pila el valor izquierdo en AC1
*      potencia: implementación simplificada
660:       MUL       0,1,0      potencia: multiplicación simple
*      <- Operacion: potencia
662:       ST       0,0(5)      asignacion: almaceno el valor para el id x
*      <- asignacion
*      -> escribir
*      -> string
*      String: "El cuadrado es: "
664:       LDC       0,69(0)      string: cargar caracter 'E'
666:       OUT       0,0,0      string: escribir caracter
668:       LDC       0,108(0)      string: cargar caracter 'l'
670:       OUT       0,0,0      string: escribir caracter
672:       LDC       0,32(0)      string: cargar caracter ' '
674:       OUT       0,0,0      string: escribir caracter
676:       LDC       0,99(0)      string: cargar caracter 'c'
678:       OUT       0,0,0      string: escribir caracter
680:       LDC       0,117(0)      string: cargar caracter 'u'
682:       OUT       0,0,0      string: escribir caracter
684:       LDC       0,97(0)      string: cargar caracter 'a'
686:       OUT       0,0,0      string: escribir caracter
688:       LDC       0,100(0)      string: cargar caracter 'd'
690:       OUT       0,0,0      string: escribir caracter
692:       LDC       0,114(0)      string: cargar caracter 'r'
694:       OUT       0,0,0      string: escribir caracter
696:       LDC       0,97(0)      string: cargar caracter 'a'
698:       OUT       0,0,0      string: escribir caracter
700:       LDC       0,100(0)      string: cargar caracter 'd'
702:       OUT       0,0,0      string: escribir caracter
704:       LDC       0,111(0)      string: cargar caracter 'o'
706:       OUT       0,0,0      string: escribir caracter
708:       LDC       0,32(0)      string: cargar caracter ' '
710:       OUT       0,0,0      string: escribir caracter
712:       LDC       0,101(0)      string: cargar caracter 'e'
714:       OUT       0,0,0      string: escribir caracter
716:       LDC       0,115(0)      string: cargar caracter 's'
718:       OUT       0,0,0      string: escribir caracter
720:       LDC       0,58(0)      string: cargar caracter ':'
722:       OUT       0,0,0      string: escribir caracter
724:       LDC       0,32(0)      string: cargar caracter ' '
726:       OUT       0,0,0      string: escribir caracter
*      <- string
728:       OUT       0,0,0      escribir: genero la salida de la expresion
*      <- escribir
*      -> escribir
*      -> identificador
730:       LD       0,0(5)      cargar valor de identificador: x
*      <- identificador
732:       OUT       0,0,0      escribir: genero la salida de la expresion
*      <- escribir
*      If: el salto hacia el final debe estar aqui
372:       JEQ       0,361(7)      if: jmp hacia else
*      -> escribir
*      -> string
*      String: "Número fuera de rango"
735:       LDC       0,78(0)      string: cargar caracter 'N'
737:       OUT       0,0,0      string: escribir caracter
739:       LDC       0,250(0)      string: cargar caracter 'ú'
741:       OUT       0,0,0      string: escribir caracter
743:       LDC       0,109(0)      string: cargar caracter 'm'
745:       OUT       0,0,0      string: escribir caracter
747:       LDC       0,101(0)      string: cargar caracter 'e'
749:       OUT       0,0,0      string: escribir caracter
751:       LDC       0,114(0)      string: cargar caracter 'r'
753:       OUT       0,0,0      string: escribir caracter
755:       LDC       0,111(0)      string: cargar caracter 'o'
757:       OUT       0,0,0      string: escribir caracter
759:       LDC       0,32(0)      string: cargar caracter ' '
761:       OUT       0,0,0      string: escribir caracter
763:       LDC       0,102(0)      string: cargar caracter 'f'
765:       OUT       0,0,0      string: escribir caracter
767:       LDC       0,117(0)      string: cargar caracter 'u'
769:       OUT       0,0,0      string: escribir caracter
771:       LDC       0,101(0)      string: cargar caracter 'e'
773:       OUT       0,0,0      string: escribir caracter
775:       LDC       0,114(0)      string: cargar caracter 'r'
777:       OUT       0,0,0      string: escribir caracter
779:       LDC       0,97(0)      string: cargar caracter 'a'
781:       OUT       0,0,0      string: escribir caracter
783:       LDC       0,32(0)      string: cargar caracter ' '
785:       OUT       0,0,0      string: escribir caracter
787:       LDC       0,100(0)      string: cargar caracter 'd'
789:       OUT       0,0,0      string: escribir caracter
791:       LDC       0,101(0)      string: cargar caracter 'e'
793:       OUT       0,0,0      string: escribir caracter
795:       LDC       0,32(0)      string: cargar caracter ' '
797:       OUT       0,0,0      string: escribir caracter
799:       LDC       0,114(0)      string: cargar caracter 'r'
801:       OUT       0,0,0      string: escribir caracter
803:       LDC       0,97(0)      string: cargar caracter 'a'
805:       OUT       0,0,0      string: escribir caracter
807:       LDC       0,110(0)      string: cargar caracter 'n'
809:       OUT       0,0,0      string: escribir caracter
811:       LDC       0,103(0)      string: cargar caracter 'g'
813:       OUT       0,0,0      string: escribir caracter
815:       LDC       0,111(0)      string: cargar caracter 'o'
817:       OUT       0,0,0      string: escribir caracter
*      <- string
819:       OUT       0,0,0      escribir: genero la salida de la expresion
*      <- escribir
733:       LDA       7,86(7)      if: jmp hacia el final
*      <- if
*      -> asignacion
*      -> llamada funcion: suma_vector
821:       ST       7,1(6)      call: guardar direccion de retorno
*      Procesando argumentos de la llamada
*      -> identificador
823:       LD       0,1(5)      cargar valor de identificador: arr
*      <- identificador
*      -> constante
825:       LDC       0,10(0)      cargar constante: 10
*      <- constante
827:       ST       0,0(6)      call: guardar argumento
*      -> constante
829:       LDC       0,10(0)      cargar constante: 10
*      <- constante
831:       ST       0,-1(6)      call: guardar argumento
*      Llamada a funcion suma_vector (implementación simplificada)
*      <- llamada funcion
833:       ST       0,17(5)      asignacion: almaceno el valor para el id resultado
*      <- asignacion
*      -> escribir
*      -> string
*      String: "La suma del vector es: "
835:       LDC       0,76(0)      string: cargar caracter 'L'
837:       OUT       0,0,0      string: escribir caracter
839:       LDC       0,97(0)      string: cargar caracter 'a'
841:       OUT       0,0,0      string: escribir caracter
843:       LDC       0,32(0)      string: cargar caracter ' '
845:       OUT       0,0,0      string: escribir caracter
847:       LDC       0,115(0)      string: cargar caracter 's'
849:       OUT       0,0,0      string: escribir caracter
851:       LDC       0,117(0)      string: cargar caracter 'u'
853:       OUT       0,0,0      string: escribir caracter
855:       LDC       0,109(0)      string: cargar caracter 'm'
857:       OUT       0,0,0      string: escribir caracter
859:       LDC       0,97(0)      string: cargar caracter 'a'
861:       OUT       0,0,0      string: escribir caracter
863:       LDC       0,32(0)      string: cargar caracter ' '
865:       OUT       0,0,0      string: escribir caracter
867:       LDC       0,100(0)      string: cargar caracter 'd'
869:       OUT       0,0,0      string: escribir caracter
871:       LDC       0,101(0)      string: cargar caracter 'e'
873:       OUT       0,0,0      string: escribir caracter
875:       LDC       0,108(0)      string: cargar caracter 'l'
877:       OUT       0,0,0      string: escribir caracter
879:       LDC       0,32(0)      string: cargar caracter ' '
881:       OUT       0,0,0      string: escribir caracter
883:       LDC       0,118(0)      string: cargar caracter 'v'
885:       OUT       0,0,0      string: escribir caracter
887:       LDC       0,101(0)      string: cargar caracter 'e'
889:       OUT       0,0,0      string: escribir caracter
891:       LDC       0,99(0)      string: cargar caracter 'c'
893:       OUT       0,0,0      string: escribir caracter
895:       LDC       0,116(0)      string: cargar caracter 't'
897:       OUT       0,0,0      string: escribir caracter
899:       LDC       0,111(0)      string: cargar caracter 'o'
901:       OUT       0,0,0      string: escribir caracter
903:       LDC       0,114(0)      string: cargar caracter 'r'
905:       OUT       0,0,0      string: escribir caracter
907:       LDC       0,32(0)      string: cargar caracter ' '
909:       OUT       0,0,0      string: escribir caracter
911:       LDC       0,101(0)      string: cargar caracter 'e'
913:       OUT       0,0,0      string: escribir caracter
915:       LDC       0,115(0)      string: cargar caracter 's'
917:       OUT       0,0,0      string: escribir caracter
919:       LDC       0,58(0)      string: cargar caracter ':'
921:       OUT       0,0,0      string: escribir caracter
923:       LDC       0,32(0)      string: cargar caracter ' '
925:       OUT       0,0,0      string: escribir caracter
*      <- string
927:       OUT       0,0,0      escribir: genero la salida de la expresion
*      <- escribir
*      -> escribir
*      -> identificador
929:       LD       0,17(5)      cargar valor de identificador: resultado
*      <- identificador
931:       OUT       0,0,0      escribir: genero la salida de la expresion
*      <- escribir
*      -> if
*      -> Operacion: or
*      -> Operacion: mayor
*      -> identificador
933:       LD       0,16(5)      cargar valor de identificador: num
*      <- identificador
935:       ST       0,-2(6)      op: push en la pila tmp el resultado expresion izquierda
*      -> constante
937:       LDC       0,5(0)      cargar constante: 5
*      <- constante
939:       LD       1,-2(6)      op: pop o cargo de la pila el valor izquierdo en AC1
941:       SUB       0,1,0      op: >
943:       JGT       0,2(7)      saltar si AC>0
945:       LDC       0,0(0)      caso falso
947:       LDA       7,1(7)      saltar caso verdadero
949:       LDC       0,1(0)      caso verdadero
*      <- Operacion: mayor
951:       ST       0,-2(6)      op: push en la pila tmp el resultado expresion izquierda
*      -> Operacion: menor
*      -> identificador
953:       LD       0,16(5)      cargar valor de identificador: num
*      <- identificador
955:       ST       0,-3(6)      op: push en la pila tmp el resultado expresion izquierda
*      -> constante
957:       LDC       0,0(0)      cargar constante: 0
*      <- constante
959:       LD       1,-3(6)      op: pop o cargo de la pila el valor izquierdo en AC1
961:       SUB       0,1,0      op: <
963:       JLT       0,2(7)      voy dos instrucciones mas alla if verdadero (AC<0)
965:       LDC       0,0(0)      caso de falso (AC=0)
967:       LDA       7,1(7)      Salto incodicional a direccion: PC+1 (es falso evito colocarlo verdadero)
969:       LDC       0,1(0)      caso de verdadero (AC=1)
*      <- Operacion: menor
971:       LD       1,-2(6)      op: pop o cargo de la pila el valor izquierdo en AC1
973:       JNE       1,3(7)      or: si izquierdo es verdadero, resultado es verdadero
975:       JNE       0,2(7)      or: si derecho es verdadero, resultado es verdadero
977:       LDC       0,0(0)      or: ambos falsos
979:       LDA       7,1(7)      or: saltar caso verdadero
981:       LDC       0,1(0)      or: resultado verdadero
*      <- Operacion: or
*      If: el salto hacia el else debe estar aqui
*      -> escribir
*      -> string
*      String: "Condición compleja verdadera"
984:       LDC       0,67(0)      string: cargar caracter 'C'
986:       OUT       0,0,0      string: escribir caracter
988:       LDC       0,111(0)      string: cargar caracter 'o'
990:       OUT       0,0,0      string: escribir caracter
992:       LDC       0,110(0)      string: cargar caracter 'n'
994:       OUT       0,0,0      string: escribir caracter
996:       LDC       0,100(0)      string: cargar caracter 'd'
998:       OUT       0,0,0      string: escribir caracter
1000:       LDC       0,105(0)      string: cargar caracter 'i'
1002:       OUT       0,0,0      string: escribir caracter
1004:       LDC       0,99(0)      string: cargar caracter 'c'
1006:       OUT       0,0,0      string: escribir caracter
1008:       LDC       0,105(0)      string: cargar caracter 'i'
1010:       OUT       0,0,0      string: escribir caracter
1012:       LDC       0,243(0)      string: cargar caracter 'ó'
1014:       OUT       0,0,0      string: escribir caracter
1016:       LDC       0,110(0)      string: cargar caracter 'n'
1018:       OUT       0,0,0      string: escribir caracter
1020:       LDC       0,32(0)      string: cargar caracter ' '
1022:       OUT       0,0,0      string: escribir caracter
1024:       LDC       0,99(0)      string: cargar caracter 'c'
1026:       OUT       0,0,0      string: escribir caracter
1028:       LDC       0,111(0)      string: cargar caracter 'o'
1030:       OUT       0,0,0      string: escribir caracter
1032:       LDC       0,109(0)      string: cargar caracter 'm'
1034:       OUT       0,0,0      string: escribir caracter
1036:       LDC       0,112(0)      string: cargar caracter 'p'
1038:       OUT       0,0,0      string: escribir caracter
1040:       LDC       0,108(0)      string: cargar caracter 'l'
1042:       OUT       0,0,0      string: escribir caracter
1044:       LDC       0,101(0)      string: cargar caracter 'e'
1046:       OUT       0,0,0      string: escribir caracter
1048:       LDC       0,106(0)      string: cargar caracter 'j'
1050:       OUT       0,0,0      string: escribir caracter
1052:       LDC       0,97(0)      string: cargar caracter 'a'
1054:       OUT       0,0,0      string: escribir caracter
1056:       LDC       0,32(0)      string: cargar caracter ' '
1058:       OUT       0,0,0      string: escribir caracter
1060:       LDC       0,118(0)      string: cargar caracter 'v'
1062:       OUT       0,0,0      string: escribir caracter
1064:       LDC       0,101(0)      string: cargar caracter 'e'
1066:       OUT       0,0,0      string: escribir caracter
1068:       LDC       0,114(0)      string: cargar caracter 'r'
1070:       OUT       0,0,0      string: escribir caracter
1072:       LDC       0,100(0)      string: cargar caracter 'd'
1074:       OUT       0,0,0      string: escribir caracter
1076:       LDC       0,97(0)      string: cargar caracter 'a'
1078:       OUT       0,0,0      string: escribir caracter
1080:       LDC       0,100(0)      string: cargar caracter 'd'
1082:       OUT       0,0,0      string: escribir caracter
1084:       LDC       0,101(0)      string: cargar caracter 'e'
1086:       OUT       0,0,0      string: escribir caracter
1088:       LDC       0,114(0)      string: cargar caracter 'r'
1090:       OUT       0,0,0      string: escribir caracter
1092:       LDC       0,97(0)      string: cargar caracter 'a'
1094:       OUT       0,0,0      string: escribir caracter
*      <- string
1096:       OUT       0,0,0      escribir: genero la salida de la expresion
*      <- escribir
*      If: el salto hacia el final debe estar aqui
982:       JEQ       0,115(7)      if: jmp hacia else
*      <- if
*      -> if
*      -> Operacion: not
*      -> Operacion: diferente
*      -> identificador
1099:       LD       0,16(5)      cargar valor de identificador: num
*      <- identificador
1101:       ST       0,-2(6)      op: push en la pila tmp el resultado expresion izquierda
*      -> constante
1103:       LDC       0,5(0)      cargar constante: 5
*      <- constante
1105:       LD       1,-2(6)      op: pop o cargo de la pila el valor izquierdo en AC1
1107:       SUB       0,1,0      op: !=
1109:       JNE       0,2(7)      saltar si AC!=0
1111:       LDC       0,0(0)      caso falso
1113:       LDA       7,1(7)      saltar caso verdadero
1115:       LDC       0,1(0)      caso verdadero
*      <- Operacion: diferente
1117:       JEQ       0,2(7)      not: saltar si es cero (falso)
1119:       LDC       0,0(0)      not: resultado falso
1121:       LDA       7,1(7)      not: saltar carga de verdadero
1123:       LDC       0,1(0)      not: resultado verdadero
*      <- Operacion: not
*      If: el salto hacia el else debe estar aqui
*      -> escribir
*      -> string
*      String: "El número es 5"
1126:       LDC       0,69(0)      string: cargar caracter 'E'
1128:       OUT       0,0,0      string: escribir caracter
1130:       LDC       0,108(0)      string: cargar caracter 'l'
1132:       OUT       0,0,0      string: escribir caracter
1134:       LDC       0,32(0)      string: cargar caracter ' '
1136:       OUT       0,0,0      string: escribir caracter
1138:       LDC       0,110(0)      string: cargar caracter 'n'
1140:       OUT       0,0,0      string: escribir caracter
1142:       LDC       0,250(0)      string: cargar caracter 'ú'
1144:       OUT       0,0,0      string: escribir caracter
1146:       LDC       0,109(0)      string: cargar caracter 'm'
1148:       OUT       0,0,0      string: escribir caracter
1150:       LDC       0,101(0)      string: cargar caracter 'e'
1152:       OUT       0,0,0      string: escribir caracter
1154:       LDC       0,114(0)      string: cargar caracter 'r'
1156:       OUT       0,0,0      string: escribir caracter
1158:       LDC       0,111(0)      string: cargar caracter 'o'
1160:       OUT       0,0,0      string: escribir caracter
1162:       LDC       0,32(0)      string: cargar caracter ' '
1164:       OUT       0,0,0      string: escribir caracter
1166:       LDC       0,101(0)      string: cargar caracter 'e'
1168:       OUT       0,0,0      string: escribir caracter
1170:       LDC       0,115(0)      string: cargar caracter 's'
1172:       OUT       0,0,0      string: escribir caracter
1174:       LDC       0,32(0)      string: cargar caracter ' '
1176:       OUT       0,0,0      string: escribir caracter
1178:       LDC       0,53(0)      string: cargar caracter '5'
1180:       OUT       0,0,0      string: escribir caracter
*      <- string
1182:       OUT       0,0,0      escribir: genero la salida de la expresion
*      <- escribir
*      If: el salto hacia el final debe estar aqui
1124:       JEQ       0,59(7)      if: jmp hacia else
*      <- if
*      <- programa
*      Fin de la ejecucion.
1185:       HALT       0,0,0      


------ FIN DEL CODIGO OBJETO DEL LENGUAJE TINY GENERADO PARA LA TM ------
Archivo ejemplo_fuente/programa_extendido.tm generado exitosamente.
