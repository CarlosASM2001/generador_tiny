
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ve.edu.unet;

import java_cup.runtime.*;
import ve.edu.unet.nodosAST.*;
import java.io.InputStreamReader;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\117\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\003\003\000\002\004\003" +
    "\000\002\004\003\000\002\005\005\000\002\005\012\000" +
    "\002\010\012\000\002\010\011\000\002\012\005\000\002" +
    "\012\003\000\002\013\003\000\002\013\007\000\002\014" +
    "\005\000\002\040\005\000\002\040\003\000\002\006\005" +
    "\000\002\015\005\000\002\015\004\000\002\015\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\017\007\000" +
    "\002\017\011\000\002\020\006\000\002\021\014\000\002" +
    "\021\012\000\002\022\005\000\002\022\010\000\002\023" +
    "\004\000\002\024\004\000\002\025\007\000\002\025\006" +
    "\000\002\026\004\000\002\027\003\000\002\030\003\000" +
    "\002\037\005\000\002\037\003\000\002\031\003\000\002" +
    "\032\005\000\002\032\005\000\002\032\004\000\002\032" +
    "\003\000\002\033\005\000\002\033\005\000\002\033\005" +
    "\000\002\033\005\000\002\033\005\000\002\033\005\000" +
    "\002\033\003\000\002\034\005\000\002\034\005\000\002" +
    "\034\003\000\002\035\005\000\002\035\005\000\002\035" +
    "\005\000\002\035\005\000\002\035\003\000\002\036\005" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\006\000\002\036\007\000\002" +
    "\036\006\000\002\036\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\242\000\010\014\012\017\014\021\013\001\002\000" +
    "\010\014\ufffd\017\ufffd\021\ufffd\001\002\000\010\014\ufffb" +
    "\017\ufffb\021\ufffb\001\002\000\010\014\012\017\014\021" +
    "\013\001\002\000\004\002\uffff\001\002\000\004\002\242" +
    "\001\002\000\010\014\ufffc\017\ufffc\021\ufffc\001\002\000" +
    "\004\061\217\001\002\000\004\061\207\001\002\000\032" +
    "\003\032\004\023\010\041\012\016\013\024\015\021\016" +
    "\020\020\045\023\037\026\027\027\017\061\025\001\002" +
    "\000\042\003\uffea\004\uffea\006\uffea\007\uffea\010\uffea\011" +
    "\uffea\012\uffea\013\uffea\015\uffea\016\uffea\020\uffea\023\uffea" +
    "\026\uffea\027\uffea\052\uffea\061\uffea\001\002\000\004\061" +
    "\206\001\002\000\042\003\uffd2\004\uffd2\006\uffd2\007\uffd2" +
    "\010\uffd2\011\uffd2\012\uffd2\013\uffd2\015\uffd2\016\uffd2\020" +
    "\uffd2\023\uffd2\026\uffd2\027\uffd2\052\uffd2\061\uffd2\001\002" +
    "\000\004\061\201\001\002\000\022\003\061\016\070\047" +
    "\066\050\071\061\060\062\054\063\063\064\057\001\002" +
    "\000\042\003\uffe7\004\uffe7\006\uffe7\007\uffe7\010\uffe7\011" +
    "\uffe7\012\uffe7\013\uffe7\015\uffe7\016\uffe7\020\uffe7\023\uffe7" +
    "\026\uffe7\027\uffe7\052\uffe7\061\uffe7\001\002\000\022\003" +
    "\061\016\070\047\066\050\071\061\060\062\054\063\063" +
    "\064\057\001\002\000\022\003\061\016\070\047\066\050" +
    "\071\061\060\062\054\063\063\064\057\001\002\000\006" +
    "\030\162\053\161\001\002\000\042\003\uffe4\004\uffe4\006" +
    "\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\015\uffe4" +
    "\016\uffe4\020\uffe4\023\uffe4\026\uffe4\027\uffe4\052\uffe4\061" +
    "\uffe4\001\002\000\042\003\uffd3\004\uffd3\006\uffd3\007\uffd3" +
    "\010\uffd3\011\uffd3\012\uffd3\013\uffd3\015\uffd3\016\uffd3\020" +
    "\uffd3\023\uffd3\026\uffd3\027\uffd3\052\uffd3\061\uffd3\001\002" +
    "\000\036\003\032\004\023\007\160\010\041\012\016\013" +
    "\024\015\021\016\020\020\045\023\037\026\027\027\017" +
    "\052\051\061\025\001\002\000\042\003\uffe1\004\uffe1\006" +
    "\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1\015\uffe1" +
    "\016\uffe1\020\uffe1\023\uffe1\026\uffe1\027\uffe1\052\uffe1\061" +
    "\uffe1\001\002\000\042\003\uffe0\004\uffe0\006\uffe0\007\uffe0" +
    "\010\uffe0\011\uffe0\012\uffe0\013\uffe0\015\uffe0\016\uffe0\020" +
    "\uffe0\023\uffe0\026\uffe0\027\uffe0\052\uffe0\061\uffe0\001\002" +
    "\000\042\003\uffeb\004\uffeb\006\uffeb\007\uffeb\010\uffeb\011" +
    "\uffeb\012\uffeb\013\uffeb\015\uffeb\016\uffeb\020\uffeb\023\uffeb" +
    "\026\uffeb\027\uffeb\052\uffeb\061\uffeb\001\002\000\042\003" +
    "\uffe3\004\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3" +
    "\013\uffe3\015\uffe3\016\uffe3\020\uffe3\023\uffe3\026\uffe3\027" +
    "\uffe3\052\uffe3\061\uffe3\001\002\000\042\003\uffe9\004\uffe9" +
    "\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\015" +
    "\uffe9\016\uffe9\020\uffe9\023\uffe9\026\uffe9\027\uffe9\052\uffe9" +
    "\061\uffe9\001\002\000\042\003\uffe6\004\uffe6\006\uffe6\007" +
    "\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\015\uffe6\016\uffe6" +
    "\020\uffe6\023\uffe6\026\uffe6\027\uffe6\052\uffe6\061\uffe6\001" +
    "\002\000\004\061\145\001\002\000\042\003\uffe5\004\uffe5" +
    "\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\015" +
    "\uffe5\016\uffe5\020\uffe5\023\uffe5\026\uffe5\027\uffe5\052\uffe5" +
    "\061\uffe5\001\002\000\032\003\032\004\023\010\041\012" +
    "\016\013\024\015\021\016\020\020\045\023\037\026\027" +
    "\027\017\061\025\001\002\000\042\003\uffe8\004\uffe8\006" +
    "\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\015\uffe8" +
    "\016\uffe8\020\uffe8\023\uffe8\026\uffe8\027\uffe8\052\uffe8\061" +
    "\uffe8\001\002\000\042\003\uffec\004\uffec\006\uffec\007\uffec" +
    "\010\uffec\011\uffec\012\uffec\013\uffec\015\uffec\016\uffec\020" +
    "\uffec\023\uffec\026\uffec\027\uffec\052\uffec\061\uffec\001\002" +
    "\000\042\003\uffe2\004\uffe2\006\uffe2\007\uffe2\010\uffe2\011" +
    "\uffe2\012\uffe2\013\uffe2\015\uffe2\016\uffe2\020\uffe2\023\uffe2" +
    "\026\uffe2\027\uffe2\052\uffe2\061\uffe2\001\002\000\004\061" +
    "\046\001\002\000\004\052\047\001\002\000\042\003\uffef" +
    "\004\uffef\006\uffef\007\uffef\010\uffef\011\uffef\012\uffef\013" +
    "\uffef\015\uffef\016\uffef\020\uffef\023\uffef\026\uffef\027\uffef" +
    "\052\uffef\061\uffef\001\002\000\036\003\032\004\023\010" +
    "\041\011\052\012\016\013\024\015\021\016\020\020\045" +
    "\023\037\026\027\027\017\052\051\061\025\001\002\000" +
    "\032\003\032\004\023\010\041\012\016\013\024\015\021" +
    "\016\020\020\045\023\037\026\027\027\017\061\025\001" +
    "\002\000\022\003\061\016\070\047\066\050\071\061\060" +
    "\062\054\063\063\064\057\001\002\000\042\003\uffed\004" +
    "\uffed\006\uffed\007\uffed\010\uffed\011\uffed\012\uffed\013\uffed" +
    "\015\uffed\016\uffed\020\uffed\023\uffed\026\uffed\027\uffed\052" +
    "\uffed\061\uffed\001\002\000\112\003\uffba\004\uffba\005\uffba" +
    "\006\uffba\007\uffba\010\uffba\011\uffba\012\uffba\013\uffba\015" +
    "\uffba\016\uffba\020\uffba\023\uffba\024\uffba\025\uffba\026\uffba" +
    "\027\uffba\031\uffba\032\uffba\033\uffba\034\uffba\035\uffba\036" +
    "\uffba\037\uffba\040\uffba\041\uffba\042\uffba\043\uffba\044\uffba" +
    "\045\uffba\046\uffba\051\uffba\052\uffba\054\uffba\057\uffba\061" +
    "\uffba\001\002\000\110\003\uffc1\004\uffc1\005\uffc1\006\uffc1" +
    "\007\uffc1\010\uffc1\011\uffc1\012\uffc1\013\uffc1\015\uffc1\016" +
    "\uffc1\020\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1" +
    "\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035\121\036\120\037" +
    "\uffc1\040\uffc1\041\uffc1\042\uffc1\043\117\045\uffc1\046\uffc1" +
    "\051\uffc1\052\uffc1\054\uffc1\057\uffc1\061\uffc1\001\002\000" +
    "\042\003\uffdd\004\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd" +
    "\012\uffdd\013\uffdd\015\uffdd\016\uffdd\020\uffdd\023\uffdd\026" +
    "\uffdd\027\uffdd\052\uffdd\061\uffdd\001\002\000\112\003\uffb8" +
    "\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8\012" +
    "\uffb8\013\uffb8\015\uffb8\016\uffb8\020\uffb8\023\uffb8\024\uffb8" +
    "\025\uffb8\026\uffb8\027\uffb8\031\uffb8\032\uffb8\033\uffb8\034" +
    "\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8" +
    "\043\uffb8\044\uffb8\045\uffb8\046\uffb8\051\uffb8\052\uffb8\054" +
    "\uffb8\057\uffb8\061\uffb8\001\002\000\114\003\uffb7\004\uffb7" +
    "\005\uffb7\006\uffb7\007\uffb7\010\uffb7\011\uffb7\012\uffb7\013" +
    "\uffb7\015\uffb7\016\uffb7\020\uffb7\023\uffb7\024\uffb7\025\uffb7" +
    "\026\uffb7\027\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035" +
    "\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7" +
    "\044\uffb7\045\uffb7\046\uffb7\051\uffb7\052\uffb7\053\141\054" +
    "\uffb7\057\uffb7\061\uffb7\001\002\000\112\003\uffb3\004\uffb3" +
    "\005\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3\013" +
    "\uffb3\015\uffb3\016\uffb3\020\uffb3\023\uffb3\024\uffb3\025\uffb3" +
    "\026\uffb3\027\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035" +
    "\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3" +
    "\044\uffb3\045\uffb3\046\uffb3\051\uffb3\052\uffb3\054\uffb3\057" +
    "\uffb3\061\uffb3\001\002\000\112\003\uffbc\004\uffbc\005\uffbc" +
    "\006\uffbc\007\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc\015" +
    "\uffbc\016\uffbc\020\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc" +
    "\027\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036" +
    "\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\137" +
    "\045\uffbc\046\uffbc\051\uffbc\052\uffbc\054\uffbc\057\uffbc\061" +
    "\uffbc\001\002\000\112\003\uffb9\004\uffb9\005\uffb9\006\uffb9" +
    "\007\uffb9\010\uffb9\011\uffb9\012\uffb9\013\uffb9\015\uffb9\016" +
    "\uffb9\020\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9" +
    "\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037" +
    "\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9" +
    "\046\uffb9\051\uffb9\052\uffb9\054\uffb9\057\uffb9\061\uffb9\001" +
    "\002\000\062\003\uffcf\004\uffcf\005\uffcf\006\uffcf\007\uffcf" +
    "\010\uffcf\011\uffcf\012\uffcf\013\uffcf\015\uffcf\016\uffcf\020" +
    "\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\045\133" +
    "\046\134\051\uffcf\052\uffcf\054\uffcf\057\uffcf\061\uffcf\001" +
    "\002\000\102\003\uffc4\004\uffc4\005\uffc4\006\uffc4\007\uffc4" +
    "\010\uffc4\011\uffc4\012\uffc4\013\uffc4\015\uffc4\016\uffc4\020" +
    "\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\031\106" +
    "\032\105\033\110\034\113\037\107\040\111\041\112\042" +
    "\114\045\uffc4\046\uffc4\051\uffc4\052\uffc4\054\uffc4\057\uffc4" +
    "\061\uffc4\001\002\000\020\003\061\016\070\050\071\061" +
    "\060\062\054\063\063\064\057\001\002\000\062\003\uffcb" +
    "\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012" +
    "\uffcb\013\uffcb\015\uffcb\016\uffcb\020\uffcb\023\uffcb\024\uffcb" +
    "\025\uffcb\026\uffcb\027\uffcb\045\uffcb\046\uffcb\051\uffcb\052" +
    "\uffcb\054\uffcb\057\uffcb\061\uffcb\001\002\000\004\061\074" +
    "\001\002\000\022\003\061\016\070\047\066\050\071\061" +
    "\060\062\054\063\063\064\057\001\002\000\004\051\073" +
    "\001\002\000\112\003\uffbb\004\uffbb\005\uffbb\006\uffbb\007" +
    "\uffbb\010\uffbb\011\uffbb\012\uffbb\013\uffbb\015\uffbb\016\uffbb" +
    "\020\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\031" +
    "\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb" +
    "\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\046" +
    "\uffbb\051\uffbb\052\uffbb\054\uffbb\057\uffbb\061\uffbb\001\002" +
    "\000\004\050\075\001\002\000\024\003\061\016\070\047" +
    "\066\050\071\051\100\061\060\062\054\063\063\064\057" +
    "\001\002\000\006\051\uffd0\057\uffd0\001\002\000\006\051" +
    "\102\057\101\001\002\000\112\003\uffb4\004\uffb4\005\uffb4" +
    "\006\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4\015" +
    "\uffb4\016\uffb4\020\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4" +
    "\027\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036" +
    "\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4" +
    "\045\uffb4\046\uffb4\051\uffb4\052\uffb4\054\uffb4\057\uffb4\061" +
    "\uffb4\001\002\000\022\003\061\016\070\047\066\050\071" +
    "\061\060\062\054\063\063\064\057\001\002\000\112\003" +
    "\uffb5\004\uffb5\005\uffb5\006\uffb5\007\uffb5\010\uffb5\011\uffb5" +
    "\012\uffb5\013\uffb5\015\uffb5\016\uffb5\020\uffb5\023\uffb5\024" +
    "\uffb5\025\uffb5\026\uffb5\027\uffb5\031\uffb5\032\uffb5\033\uffb5" +
    "\034\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042" +
    "\uffb5\043\uffb5\044\uffb5\045\uffb5\046\uffb5\051\uffb5\052\uffb5" +
    "\054\uffb5\057\uffb5\061\uffb5\001\002\000\006\051\uffd1\057" +
    "\uffd1\001\002\000\062\003\uffcc\004\uffcc\005\uffcc\006\uffcc" +
    "\007\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc\015\uffcc\016" +
    "\uffcc\020\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc" +
    "\045\uffcc\046\uffcc\051\uffcc\052\uffcc\054\uffcc\057\uffcc\061" +
    "\uffcc\001\002\000\020\003\061\016\070\050\071\061\060" +
    "\062\054\063\063\064\057\001\002\000\020\003\061\016" +
    "\070\050\071\061\060\062\054\063\063\064\057\001\002" +
    "\000\020\003\061\016\070\050\071\061\060\062\054\063" +
    "\063\064\057\001\002\000\020\003\061\016\070\050\071" +
    "\061\060\062\054\063\063\064\057\001\002\000\020\003" +
    "\061\016\070\050\071\061\060\062\054\063\063\064\057" +
    "\001\002\000\020\003\061\016\070\050\071\061\060\062" +
    "\054\063\063\064\057\001\002\000\020\003\061\016\070" +
    "\050\071\061\060\062\054\063\063\064\057\001\002\000" +
    "\020\003\061\016\070\050\071\061\060\062\054\063\063" +
    "\064\057\001\002\000\066\003\uffc5\004\uffc5\005\uffc5\006" +
    "\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5\015\uffc5" +
    "\016\uffc5\020\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027" +
    "\uffc5\033\110\034\113\045\uffc5\046\uffc5\051\uffc5\052\uffc5" +
    "\054\uffc5\057\uffc5\061\uffc5\001\002\000\110\003\uffc2\004" +
    "\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2" +
    "\013\uffc2\015\uffc2\016\uffc2\020\uffc2\023\uffc2\024\uffc2\025" +
    "\uffc2\026\uffc2\027\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2" +
    "\035\121\036\120\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043" +
    "\117\045\uffc2\046\uffc2\051\uffc2\052\uffc2\054\uffc2\057\uffc2" +
    "\061\uffc2\001\002\000\020\003\061\016\070\050\071\061" +
    "\060\062\054\063\063\064\057\001\002\000\020\003\061" +
    "\016\070\050\071\061\060\062\054\063\063\064\057\001" +
    "\002\000\020\003\061\016\070\050\071\061\060\062\054" +
    "\063\063\064\057\001\002\000\110\003\uffc0\004\uffc0\005" +
    "\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0\012\uffc0\013\uffc0" +
    "\015\uffc0\016\uffc0\020\uffc0\023\uffc0\024\uffc0\025\uffc0\026" +
    "\uffc0\027\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0" +
    "\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\045" +
    "\uffc0\046\uffc0\051\uffc0\052\uffc0\054\uffc0\057\uffc0\061\uffc0" +
    "\001\002\000\110\003\uffbf\004\uffbf\005\uffbf\006\uffbf\007" +
    "\uffbf\010\uffbf\011\uffbf\012\uffbf\013\uffbf\015\uffbf\016\uffbf" +
    "\020\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\031" +
    "\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf" +
    "\040\uffbf\041\uffbf\042\uffbf\043\uffbf\045\uffbf\046\uffbf\051" +
    "\uffbf\052\uffbf\054\uffbf\057\uffbf\061\uffbf\001\002\000\110" +
    "\003\uffbe\004\uffbe\005\uffbe\006\uffbe\007\uffbe\010\uffbe\011" +
    "\uffbe\012\uffbe\013\uffbe\015\uffbe\016\uffbe\020\uffbe\023\uffbe" +
    "\024\uffbe\025\uffbe\026\uffbe\027\uffbe\031\uffbe\032\uffbe\033" +
    "\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe" +
    "\042\uffbe\043\uffbe\045\uffbe\046\uffbe\051\uffbe\052\uffbe\054" +
    "\uffbe\057\uffbe\061\uffbe\001\002\000\066\003\uffc7\004\uffc7" +
    "\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7\013" +
    "\uffc7\015\uffc7\016\uffc7\020\uffc7\023\uffc7\024\uffc7\025\uffc7" +
    "\026\uffc7\027\uffc7\033\110\034\113\045\uffc7\046\uffc7\051" +
    "\uffc7\052\uffc7\054\uffc7\057\uffc7\061\uffc7\001\002\000\066" +
    "\003\uffc9\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011" +
    "\uffc9\012\uffc9\013\uffc9\015\uffc9\016\uffc9\020\uffc9\023\uffc9" +
    "\024\uffc9\025\uffc9\026\uffc9\027\uffc9\033\110\034\113\045" +
    "\uffc9\046\uffc9\051\uffc9\052\uffc9\054\uffc9\057\uffc9\061\uffc9" +
    "\001\002\000\110\003\uffc3\004\uffc3\005\uffc3\006\uffc3\007" +
    "\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3\015\uffc3\016\uffc3" +
    "\020\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\031" +
    "\uffc3\032\uffc3\033\uffc3\034\uffc3\035\121\036\120\037\uffc3" +
    "\040\uffc3\041\uffc3\042\uffc3\043\117\045\uffc3\046\uffc3\051" +
    "\uffc3\052\uffc3\054\uffc3\057\uffc3\061\uffc3\001\002\000\066" +
    "\003\uffc8\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8\011" +
    "\uffc8\012\uffc8\013\uffc8\015\uffc8\016\uffc8\020\uffc8\023\uffc8" +
    "\024\uffc8\025\uffc8\026\uffc8\027\uffc8\033\110\034\113\045" +
    "\uffc8\046\uffc8\051\uffc8\052\uffc8\054\uffc8\057\uffc8\061\uffc8" +
    "\001\002\000\066\003\uffc6\004\uffc6\005\uffc6\006\uffc6\007" +
    "\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6\015\uffc6\016\uffc6" +
    "\020\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\033" +
    "\110\034\113\045\uffc6\046\uffc6\051\uffc6\052\uffc6\054\uffc6" +
    "\057\uffc6\061\uffc6\001\002\000\066\003\uffca\004\uffca\005" +
    "\uffca\006\uffca\007\uffca\010\uffca\011\uffca\012\uffca\013\uffca" +
    "\015\uffca\016\uffca\020\uffca\023\uffca\024\uffca\025\uffca\026" +
    "\uffca\027\uffca\033\110\034\113\045\uffca\046\uffca\051\uffca" +
    "\052\uffca\054\uffca\057\uffca\061\uffca\001\002\000\020\003" +
    "\061\016\070\050\071\061\060\062\054\063\063\064\057" +
    "\001\002\000\020\003\061\016\070\050\071\061\060\062" +
    "\054\063\063\064\057\001\002\000\062\003\uffce\004\uffce" +
    "\005\uffce\006\uffce\007\uffce\010\uffce\011\uffce\012\uffce\013" +
    "\uffce\015\uffce\016\uffce\020\uffce\023\uffce\024\uffce\025\uffce" +
    "\026\uffce\027\uffce\045\uffce\046\uffce\051\uffce\052\uffce\054" +
    "\uffce\057\uffce\061\uffce\001\002\000\062\003\uffcd\004\uffcd" +
    "\005\uffcd\006\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013" +
    "\uffcd\015\uffcd\016\uffcd\020\uffcd\023\uffcd\024\uffcd\025\uffcd" +
    "\026\uffcd\027\uffcd\045\uffcd\046\uffcd\051\uffcd\052\uffcd\054" +
    "\uffcd\057\uffcd\061\uffcd\001\002\000\020\003\061\016\070" +
    "\050\071\061\060\062\054\063\063\064\057\001\002\000" +
    "\110\003\uffbd\004\uffbd\005\uffbd\006\uffbd\007\uffbd\010\uffbd" +
    "\011\uffbd\012\uffbd\013\uffbd\015\uffbd\016\uffbd\020\uffbd\023" +
    "\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\031\uffbd\032\uffbd" +
    "\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041" +
    "\uffbd\042\uffbd\043\uffbd\045\uffbd\046\uffbd\051\uffbd\052\uffbd" +
    "\054\uffbd\057\uffbd\061\uffbd\001\002\000\022\003\061\016" +
    "\070\047\066\050\071\061\060\062\054\063\063\064\057" +
    "\001\002\000\004\054\143\001\002\000\112\003\uffb6\004" +
    "\uffb6\005\uffb6\006\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6" +
    "\013\uffb6\015\uffb6\016\uffb6\020\uffb6\023\uffb6\024\uffb6\025" +
    "\uffb6\026\uffb6\027\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6" +
    "\035\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043" +
    "\uffb6\044\uffb6\045\uffb6\046\uffb6\051\uffb6\052\uffb6\054\uffb6" +
    "\057\uffb6\061\uffb6\001\002\000\042\003\uffee\004\uffee\006" +
    "\uffee\007\uffee\010\uffee\011\uffee\012\uffee\013\uffee\015\uffee" +
    "\016\uffee\020\uffee\023\uffee\026\uffee\027\uffee\052\uffee\061" +
    "\uffee\001\002\000\004\030\146\001\002\000\022\003\061" +
    "\016\070\047\066\050\071\061\060\062\054\063\063\064" +
    "\057\001\002\000\004\024\150\001\002\000\022\003\061" +
    "\016\070\047\066\050\071\061\060\062\054\063\063\064" +
    "\057\001\002\000\034\003\032\004\023\010\041\012\016" +
    "\013\024\015\021\016\020\020\045\023\037\025\152\026" +
    "\027\027\017\061\025\001\002\000\022\003\061\016\070" +
    "\047\066\050\071\061\060\062\054\063\063\064\057\001" +
    "\002\000\036\003\032\004\023\007\154\010\041\012\016" +
    "\013\024\015\021\016\020\020\045\023\037\026\027\027" +
    "\017\052\051\061\025\001\002\000\042\003\uffdb\004\uffdb" +
    "\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb\015" +
    "\uffdb\016\uffdb\020\uffdb\023\uffdb\026\uffdb\027\uffdb\052\uffdb" +
    "\061\uffdb\001\002\000\032\003\032\004\023\010\041\012" +
    "\016\013\024\015\021\016\020\020\045\023\037\026\027" +
    "\027\017\061\025\001\002\000\036\003\032\004\023\007" +
    "\157\010\041\012\016\013\024\015\021\016\020\020\045" +
    "\023\037\026\027\027\017\052\051\061\025\001\002\000" +
    "\042\003\uffdc\004\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc" +
    "\012\uffdc\013\uffdc\015\uffdc\016\uffdc\020\uffdc\023\uffdc\026" +
    "\uffdc\027\uffdc\052\uffdc\061\uffdc\001\002\000\004\002\ufff2" +
    "\001\002\000\022\003\061\016\070\047\066\050\071\061" +
    "\060\062\054\063\063\064\057\001\002\000\022\003\061" +
    "\016\070\047\066\050\071\061\060\062\054\063\063\064" +
    "\057\001\002\000\042\003\uffda\004\uffda\006\uffda\007\uffda" +
    "\010\uffda\011\uffda\012\uffda\013\uffda\015\uffda\016\uffda\020" +
    "\uffda\023\uffda\026\uffda\027\uffda\052\uffda\061\uffda\001\002" +
    "\000\004\054\165\001\002\000\004\030\166\001\002\000" +
    "\022\003\061\016\070\047\066\050\071\061\060\062\054" +
    "\063\063\064\057\001\002\000\042\003\uffd9\004\uffd9\006" +
    "\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9\015\uffd9" +
    "\016\uffd9\020\uffd9\023\uffd9\026\uffd9\027\uffd9\052\uffd9\061" +
    "\uffd9\001\002\000\042\003\uffd7\004\uffd7\006\uffd7\007\uffd7" +
    "\010\uffd7\011\uffd7\012\uffd7\013\uffd7\015\uffd7\016\uffd7\020" +
    "\uffd7\023\uffd7\026\uffd7\027\uffd7\052\uffd7\061\uffd7\001\002" +
    "\000\004\005\172\001\002\000\032\003\032\004\023\010" +
    "\041\012\016\013\024\015\021\016\020\020\045\023\037" +
    "\026\027\027\017\061\025\001\002\000\040\003\032\004" +
    "\023\006\174\007\175\010\041\012\016\013\024\015\021" +
    "\016\020\020\045\023\037\026\027\027\017\052\051\061" +
    "\025\001\002\000\032\003\032\004\023\010\041\012\016" +
    "\013\024\015\021\016\020\020\045\023\037\026\027\027" +
    "\017\061\025\001\002\000\042\003\uffdf\004\uffdf\006\uffdf" +
    "\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\015\uffdf\016" +
    "\uffdf\020\uffdf\023\uffdf\026\uffdf\027\uffdf\052\uffdf\061\uffdf" +
    "\001\002\000\036\003\032\004\023\007\177\010\041\012" +
    "\016\013\024\015\021\016\020\020\045\023\037\026\027" +
    "\027\017\052\051\061\025\001\002\000\042\003\uffde\004" +
    "\uffde\006\uffde\007\uffde\010\uffde\011\uffde\012\uffde\013\uffde" +
    "\015\uffde\016\uffde\020\uffde\023\uffde\026\uffde\027\uffde\052" +
    "\uffde\061\uffde\001\002\000\042\003\uffd4\004\uffd4\006\uffd4" +
    "\007\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\015\uffd4\016" +
    "\uffd4\020\uffd4\023\uffd4\026\uffd4\027\uffd4\052\uffd4\061\uffd4" +
    "\001\002\000\004\050\202\001\002\000\024\003\061\016" +
    "\070\047\066\050\071\051\204\061\060\062\054\063\063" +
    "\064\057\001\002\000\006\051\205\057\101\001\002\000" +
    "\042\003\uffd5\004\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5" +
    "\012\uffd5\013\uffd5\015\uffd5\016\uffd5\020\uffd5\023\uffd5\026" +
    "\uffd5\027\uffd5\052\uffd5\061\uffd5\001\002\000\042\003\uffd6" +
    "\004\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6\013" +
    "\uffd6\015\uffd6\016\uffd6\020\uffd6\023\uffd6\026\uffd6\027\uffd6" +
    "\052\uffd6\061\uffd6\001\002\000\042\003\uffd8\004\uffd8\006" +
    "\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\015\uffd8" +
    "\016\uffd8\020\uffd8\023\uffd8\026\uffd8\027\uffd8\052\uffd8\061" +
    "\uffd8\001\002\000\006\052\211\060\210\001\002\000\004" +
    "\022\212\001\002\000\010\014\ufffa\017\ufffa\021\ufffa\001" +
    "\002\000\004\053\213\001\002\000\004\062\214\001\002" +
    "\000\004\054\215\001\002\000\004\052\216\001\002\000" +
    "\010\014\ufff9\017\ufff9\021\ufff9\001\002\000\004\050\220" +
    "\001\002\000\006\051\222\061\221\001\002\000\010\051" +
    "\ufff4\057\ufff4\060\236\001\002\000\004\017\233\001\002" +
    "\000\006\051\226\057\225\001\002\000\006\051\ufff5\057" +
    "\ufff5\001\002\000\004\061\221\001\002\000\004\017\227" +
    "\001\002\000\032\003\032\004\023\010\041\012\016\013" +
    "\024\015\021\016\020\020\045\023\037\026\027\027\017" +
    "\061\025\001\002\000\036\003\032\004\023\007\231\010" +
    "\041\012\016\013\024\015\021\016\020\020\045\023\037" +
    "\026\027\027\017\052\051\061\025\001\002\000\010\014" +
    "\ufff8\017\ufff8\021\ufff8\001\002\000\006\051\ufff6\057\ufff6" +
    "\001\002\000\032\003\032\004\023\010\041\012\016\013" +
    "\024\015\021\016\020\020\045\023\037\026\027\027\017" +
    "\061\025\001\002\000\036\003\032\004\023\007\235\010" +
    "\041\012\016\013\024\015\021\016\020\020\045\023\037" +
    "\026\027\027\017\052\051\061\025\001\002\000\010\014" +
    "\ufff7\017\ufff7\021\ufff7\001\002\000\004\022\237\001\002" +
    "\000\004\053\240\001\002\000\004\054\241\001\002\000" +
    "\006\051\ufff3\057\ufff3\001\002\000\004\002\000\001\002" +
    "\000\004\002\001\001\002\000\010\014\ufffe\017\ufffe\021" +
    "\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\242\000\016\002\007\003\005\004\003\005\010\010" +
    "\004\014\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\004\243\005\010\010\004\014\242\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\006\030\015\027\016" +
    "\042\017\032\020\014\021\034\022\041\023\021\024\035" +
    "\025\037\026\025\027\033\030\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\031\177\032\063\033\066\034\064\035\054\036" +
    "\061\001\001\000\002\001\001\000\016\031\170\032\063" +
    "\033\066\034\064\035\054\036\061\001\001\000\016\031" +
    "\167\032\063\033\066\034\064\035\054\036\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\006\030\016\052\017\032\020\014\021\034\022\041" +
    "\023\021\024\035\025\037\026\025\027\033\030\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\006\030\015\047" +
    "\016\042\017\032\020\014\021\034\022\041\023\021\024" +
    "\035\025\037\026\025\027\033\030\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\006\030" +
    "\016\052\017\032\020\014\021\034\022\041\023\021\024" +
    "\035\025\037\026\025\027\033\030\043\001\001\000\032" +
    "\006\030\016\143\017\032\020\014\021\034\022\041\023" +
    "\021\024\035\025\037\026\025\027\033\030\043\001\001" +
    "\000\016\031\055\032\063\033\066\034\064\035\054\036" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\033\103\034" +
    "\064\035\054\036\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\031\071\032\063\033\066\034\064\035" +
    "\054\036\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\031\075\032\063\033\066\034" +
    "\064\035\054\036\061\037\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\031\102\032" +
    "\063\033\066\034\064\035\054\036\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\034" +
    "\131\035\054\036\061\001\001\000\010\034\130\035\054" +
    "\036\061\001\001\000\010\034\127\035\054\036\061\001" +
    "\001\000\006\035\126\036\061\001\001\000\010\034\125" +
    "\035\054\036\061\001\001\000\010\034\124\035\054\036" +
    "\061\001\001\000\006\035\115\036\061\001\001\000\010" +
    "\034\114\035\054\036\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\036\123\001\001\000\004\036\122" +
    "\001\001\000\004\036\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\033\135\034\064\035\054" +
    "\036\061\001\001\000\012\033\134\034\064\035\054\036" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\036\137\001\001\000\002\001\001\000\016\031\141\032" +
    "\063\033\066\034\064\035\054\036\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\031\146\032\063\033\066\034\064\035\054" +
    "\036\061\001\001\000\002\001\001\000\016\031\150\032" +
    "\063\033\066\034\064\035\054\036\061\001\001\000\034" +
    "\006\030\015\152\016\042\017\032\020\014\021\034\022" +
    "\041\023\021\024\035\025\037\026\025\027\033\030\043" +
    "\001\001\000\016\031\154\032\063\033\066\034\064\035" +
    "\054\036\061\001\001\000\032\006\030\016\052\017\032" +
    "\020\014\021\034\022\041\023\021\024\035\025\037\026" +
    "\025\027\033\030\043\001\001\000\002\001\001\000\034" +
    "\006\030\015\155\016\042\017\032\020\014\021\034\022" +
    "\041\023\021\024\035\025\037\026\025\027\033\030\043" +
    "\001\001\000\032\006\030\016\052\017\032\020\014\021" +
    "\034\022\041\023\021\024\035\025\037\026\025\027\033" +
    "\030\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\031\163\032\063\033\066\034\064\035\054\036\061" +
    "\001\001\000\016\031\162\032\063\033\066\034\064\035" +
    "\054\036\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\031\166\032\063\033\066\034" +
    "\064\035\054\036\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\006\030\015\172\016" +
    "\042\017\032\020\014\021\034\022\041\023\021\024\035" +
    "\025\037\026\025\027\033\030\043\001\001\000\032\006" +
    "\030\016\052\017\032\020\014\021\034\022\041\023\021" +
    "\024\035\025\037\026\025\027\033\030\043\001\001\000" +
    "\034\006\030\015\175\016\042\017\032\020\014\021\034" +
    "\022\041\023\021\024\035\025\037\026\025\027\033\030" +
    "\043\001\001\000\002\001\001\000\032\006\030\016\052" +
    "\017\032\020\014\021\034\022\041\023\021\024\035\025" +
    "\037\026\025\027\033\030\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\031\075\032" +
    "\063\033\066\034\064\035\054\036\061\037\202\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\222\013\223\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\231\001\001\000\002\001\001\000\034\006\030\015" +
    "\227\016\042\017\032\020\014\021\034\022\041\023\021" +
    "\024\035\025\037\026\025\027\033\030\043\001\001\000" +
    "\032\006\030\016\052\017\032\020\014\021\034\022\041" +
    "\023\021\024\035\025\037\026\025\027\033\030\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\006\030" +
    "\015\233\016\042\017\032\020\014\021\034\022\041\023" +
    "\021\024\035\025\037\026\025\027\033\030\043\001\001" +
    "\000\032\006\030\016\052\017\032\020\014\021\034\022" +
    "\041\023\021\024\035\025\037\026\025\027\033\030\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




/***********
SymbolFactory es una nueva caracteristica que ha sido añadida a las version 11a de cup, la cual facilita la implementacion de clases Symbol personalizadas
, esto debido a que dicha clase no provee mucha información de contexto que podria ser util para el analisis semantico o ayudar en la construccion del AST
Mas informacion en: http//4thmouse.com/index.php/2007/02/15/using-custom-symbols-in-cup/
***********/
	public static void main(String args[]) throws Exception {
		SymbolFactory sf = new DefaultSymbolFactory();
		parser parser_obj;
		if (args.length==0) 
			parser_obj=new parser(new LexicoExtendido(new InputStreamReader(System.in),sf),sf);
		else
			parser_obj=new parser(new LexicoExtendido(new InputStreamReader(new java.io.FileInputStream(args[0])),sf),sf);

		parser_obj.parse();
		NodoBase root=parser_obj.action_obj.getASTroot();
		System.out.println();
		System.out.println("IMPRESION DEL AST GENERADO");
		System.out.println();
        Util.imprimirAST(root);
		TablaSimbolos ts = new TablaSimbolos();
		ts.cargarTabla(root);
		ts.ImprimirClaves();
		Generador.setTablaSimbolos(ts);
		Generador.generarCodigoObjeto(root);
	}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


	private boolean debug=true;
	private NodoBase ast=null;
	private int lineanum=0;
	
	//Debe ser llamada solo despues de un parse(), en caso contrario retornara null siempre;
	public NodoBase getASTroot(){
		return ast;
	}
	

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= declaration_seq main 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase d = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase m = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla programa completo"); 
              ast = new NodoPrograma(d, m);
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= main 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase m = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla programa solo main"); 
              ast = new NodoPrograma(null, m);
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaration_seq ::= declaration_seq declaration 
            {
              NodoBase RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase seq = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int declleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase decl = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t secuencia declaraciones"); 
                      NodoBase current = seq;
                      if(current != null){
                          while(current.TieneHermano()){
                              current = current.getHermanoDerecha();
                          }
                          current.setHermanoDerecha(decl);
                          RESULT = seq;
                      } else {
                          RESULT = decl;
                      }
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_seq",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaration_seq ::= declaration 
            {
              NodoBase RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase decl = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t declaracion unica"); 
                      RESULT = decl;
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_seq",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration ::= global_declaration 
            {
              NodoBase RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase g = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = g; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration ::= function_declaration 
            {
              NodoBase RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase f = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // global_declaration ::= GLOBAL ID SEMI 
            {
              NodoBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(debug) System.out.println("\t declaracion global variable"); 
                         RESULT = new NodoDeclaracion(var.toString(), true);
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_declaration",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // global_declaration ::= GLOBAL ID COLON ARRAY LBRACKET NUM RBRACKET SEMI 
            {
              NodoBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String size = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 if(debug) System.out.println("\t declaracion global array"); 
                         RESULT = new NodoDeclaracion(var.toString(), true, new NodoValor(Integer.parseInt(size)));
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_declaration",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // function_declaration ::= FUNCTION ID LPAREN parameter_list RPAREN BEGIN stmt_seq END 
            {
              NodoBase RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodoBase params = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase body = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(debug) System.out.println("\t declaracion funcion con parametros"); 
                           RESULT = new NodoFuncion(name.toString(), params, body, null);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // function_declaration ::= FUNCTION ID LPAREN RPAREN BEGIN stmt_seq END 
            {
              NodoBase RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase body = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(debug) System.out.println("\t declaracion funcion sin parametros"); 
                           RESULT = new NodoFuncion(name.toString(), null, body, null);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // parameter_list ::= parameter_list COMMA parameter 
            {
              NodoBase RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase list = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase param = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t lista parametros"); 
                     NodoBase current = list;
                     if(current != null){
                         while(current.TieneHermano()){
                             current = current.getHermanoDerecha();
                         }
                         current.setHermanoDerecha(param);
                         RESULT = list;
                     } else {
                         RESULT = param;
                     }
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parameter_list ::= parameter 
            {
              NodoBase RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase param = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = param; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parameter ::= ID 
            {
              NodoBase RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoDeclaracion(name.toString(), false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parameter ::= ID COLON ARRAY LBRACKET RBRACKET 
            {
              NodoBase RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new NodoDeclaracion(name.toString(), false, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // main ::= BEGIN stmt_seq END 
            {
              NodoBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase s = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(debug) System.out.println("\t programa principal"); 
           RESULT = s;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("main",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // block ::= BEGIN stmt_seq END 
            {
              NodoBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase s = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(debug) System.out.println("\t bloque begin-end"); 
            RESULT = s;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // block ::= stmt 
            {
              NodoBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase s = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t bloque sentencia unica"); 
            RESULT = s;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // var_declaration ::= VAR ID SEMI 
            {
              NodoBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(debug) System.out.println("\t declaracion variable local"); 
                      RESULT = new NodoDeclaracion(var.toString(), false);
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt_seq ::= stmt_seq SEMI stmt 
            {
              NodoBase RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase seq = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sent = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t secuencia sentencias"); 
               NodoBase current = seq;
               if(current != null){
                   while(current.TieneHermano()){
                       current = current.getHermanoDerecha();
                   }
                   current.setHermanoDerecha(sent);
                   RESULT = seq;
               } else {
                   RESULT = sent;
               }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_seq",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmt_seq ::= stmt_seq stmt 
            {
              NodoBase RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase seq = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sent = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t secuencia sentencias sin punto y coma"); 
               NodoBase current = seq;
               if(current != null){
                   while(current.TieneHermano()){
                       current = current.getHermanoDerecha();
                   }
                   current.setHermanoDerecha(sent);
                   RESULT = seq;
               } else {
                   RESULT = sent;
               }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_seq",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmt_seq ::= stmt 
            {
              NodoBase RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sent = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t sentencia unica"); 
               RESULT = sent;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_seq",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmt ::= if_stmt 
            {
              NodoBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase s = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmt ::= repeat_stmt 
            {
              NodoBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase s = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmt ::= for_stmt 
            {
              NodoBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase s = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmt ::= assign_stmt 
            {
              NodoBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase s = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmt ::= read_stmt 
            {
              NodoBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase s = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt ::= write_stmt 
            {
              NodoBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase s = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt ::= call_stmt 
            {
              NodoBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase s = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt ::= return_stmt 
            {
              NodoBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase s = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= break_stmt 
            {
              NodoBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase s = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= continue_stmt 
            {
              NodoBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase s = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt ::= var_declaration 
            {
              NodoBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase s = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= error 
            {
              NodoBase RESULT =null;
		 if(debug) System.out.println("\t error en sentencia"); 
            System.out.println("Error sintáctico en sentencia");
            RESULT = null;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // if_stmt ::= IF exp THEN stmt_seq END 
            {
              NodoBase RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase cond = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int then_partleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int then_partright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase then_part = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(debug) System.out.println("\t if simple"); 
              RESULT = new NodoIf(cond, then_part);
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // if_stmt ::= IF exp THEN stmt_seq ELSE stmt_seq END 
            {
              NodoBase RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase cond = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int then_partleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int then_partright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase then_part = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int else_partleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int else_partright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase else_part = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(debug) System.out.println("\t if-else"); 
              RESULT = new NodoIf(cond, then_part, else_part);
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // repeat_stmt ::= REPEAT stmt_seq UNTIL exp 
            {
              NodoBase RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase body = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase cond = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t repeat-until"); 
                  RESULT = new NodoRepeat(body, cond);
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeat_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // for_stmt ::= FOR ID ASSIGN exp TO exp STEP exp stmt_seq END 
            {
              NodoBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		NodoBase init = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int final_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int final_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodoBase final_val = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int stepleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stepright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase step = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase body = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(debug) System.out.println("\t for con step"); 
               RESULT = new NodoFor(var.toString(), init, final_val, step, body);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // for_stmt ::= FOR ID ASSIGN exp TO exp stmt_seq END 
            {
              NodoBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodoBase init = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int final_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int final_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase final_val = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase body = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(debug) System.out.println("\t for sin step"); 
               RESULT = new NodoFor(var.toString(), init, final_val, new NodoValor(1), body);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // assign_stmt ::= ID ASSIGN exp 
            {
              NodoBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase value = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t asignacion variable"); 
                  RESULT = new NodoAsignacion(var.toString(), value);
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // assign_stmt ::= ID LBRACKET exp RBRACKET ASSIGN exp 
            {
              NodoBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase index = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase value = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t asignacion array"); 
                  RESULT = new NodoAsignacion(var.toString(), value, index);
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // read_stmt ::= READ ID 
            {
              NodoBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t read variable"); 
                RESULT = new NodoLeer(var.toString());
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // write_stmt ::= WRITE exp 
            {
              NodoBase RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase value = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t write expresion"); 
                 RESULT = new NodoEscribir(value);
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_stmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // call_stmt ::= CALL ID LPAREN argument_list RPAREN 
            {
              NodoBase RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String func = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase args = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(debug) System.out.println("\t llamada funcion con argumentos"); 
                RESULT = new NodoLlamadaFuncion(func.toString(), args);
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_stmt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // call_stmt ::= CALL ID LPAREN RPAREN 
            {
              NodoBase RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String func = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 if(debug) System.out.println("\t llamada funcion sin argumentos"); 
                RESULT = new NodoLlamadaFuncion(func.toString());
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_stmt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // return_stmt ::= RETURN exp 
            {
              NodoBase RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase value = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t return con valor"); 
                  RESULT = new NodoReturn(value);
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // break_stmt ::= BREAK 
            {
              NodoBase RESULT =null;
		 if(debug) System.out.println("\t break"); 
                 RESULT = new NodoBreak();
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("break_stmt",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // continue_stmt ::= CONTINUE 
            {
              NodoBase RESULT =null;
		 if(debug) System.out.println("\t continue"); 
                    RESULT = new NodoContinue();
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("continue_stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // argument_list ::= argument_list COMMA exp 
            {
              NodoBase RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase list = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase arg = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t lista argumentos"); 
                    NodoBase current = list;
                    if(current != null){
                        while(current.TieneHermano()){
                            current = current.getHermanoDerecha();
                        }
                        current.setHermanoDerecha(arg);
                        RESULT = list;
                    } else {
                        RESULT = arg;
                    }
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument_list",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // argument_list ::= exp 
            {
              NodoBase RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase arg = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = arg; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument_list",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= logical_exp 
            {
              NodoBase RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase e = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // logical_exp ::= logical_exp OR relational_exp 
            {
              NodoBase RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase left = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase right = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t operacion OR"); 
                  RESULT = new NodoOperacion(left, tipoOp.or, right);
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // logical_exp ::= logical_exp AND relational_exp 
            {
              NodoBase RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase left = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase right = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t operacion AND"); 
                  RESULT = new NodoOperacion(left, tipoOp.and, right);
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // logical_exp ::= NOT relational_exp 
            {
              NodoBase RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase expr = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t operacion NOT"); 
                  RESULT = new NodoOperacion(null, tipoOp.not, expr);
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // logical_exp ::= relational_exp 
            {
              NodoBase RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase e = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // relational_exp ::= simple_exp LT simple_exp 
            {
              NodoBase RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase left = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase right = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t operacion menor"); 
                     RESULT = new NodoOperacion(left, tipoOp.menor, right);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_exp",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // relational_exp ::= simple_exp LE simple_exp 
            {
              NodoBase RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase left = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase right = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t operacion menor igual"); 
                     RESULT = new NodoOperacion(left, tipoOp.menorigual, right);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_exp",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // relational_exp ::= simple_exp GT simple_exp 
            {
              NodoBase RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase left = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase right = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t operacion mayor"); 
                     RESULT = new NodoOperacion(left, tipoOp.mayor, right);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_exp",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // relational_exp ::= simple_exp GE simple_exp 
            {
              NodoBase RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase left = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase right = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t operacion mayor igual"); 
                     RESULT = new NodoOperacion(left, tipoOp.mayorigual, right);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_exp",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // relational_exp ::= simple_exp EQ simple_exp 
            {
              NodoBase RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase left = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase right = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t operacion igual"); 
                     RESULT = new NodoOperacion(left, tipoOp.igual, right);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_exp",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // relational_exp ::= simple_exp NE simple_exp 
            {
              NodoBase RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase left = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase right = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t operacion diferente"); 
                     RESULT = new NodoOperacion(left, tipoOp.diferente, right);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_exp",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // relational_exp ::= simple_exp 
            {
              NodoBase RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase e = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_exp",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // simple_exp ::= simple_exp PLUS term 
            {
              NodoBase RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase left = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase right = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t suma"); 
                 RESULT = new NodoOperacion(left, tipoOp.mas, right);
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // simple_exp ::= simple_exp MINUS term 
            {
              NodoBase RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase left = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase right = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t resta"); 
                 RESULT = new NodoOperacion(left, tipoOp.menos, right);
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // simple_exp ::= term 
            {
              NodoBase RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase e = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // term ::= term TIMES factor 
            {
              NodoBase RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase left = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase right = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t multiplicacion"); 
           RESULT = new NodoOperacion(left, tipoOp.por, right);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // term ::= term OVER factor 
            {
              NodoBase RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase left = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase right = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t division"); 
           RESULT = new NodoOperacion(left, tipoOp.entre, right);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // term ::= term MOD factor 
            {
              NodoBase RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase left = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase right = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t modulo"); 
           RESULT = new NodoOperacion(left, tipoOp.modulo, right);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // term ::= factor POW factor 
            {
              NodoBase RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase left = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase right = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t potencia"); 
           RESULT = new NodoOperacion(left, tipoOp.potencia, right);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // term ::= factor 
            {
              NodoBase RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase e = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // factor ::= LPAREN exp RPAREN 
            {
              NodoBase RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase e = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(debug) System.out.println("\t expresion parentesis"); 
             RESULT = e;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // factor ::= NUM 
            {
              NodoBase RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t numero entero"); 
             if(value != null){
                 RESULT = new NodoValor(Integer.parseInt(value));
             } else {
                 RESULT = null;
                 System.out.println("Error: valor numérico nulo");
             }
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // factor ::= REAL 
            {
              NodoBase RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t numero real"); 
             if(value != null){
                 RESULT = new NodoValor(Double.parseDouble(value));
             } else {
                 RESULT = null;
                 System.out.println("Error: valor real nulo");
             }
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // factor ::= STRING 
            {
              NodoBase RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t cadena texto"); 
             if(value != null){
                 RESULT = new NodoString(value);
             } else {
                 RESULT = null;
                 System.out.println("Error: cadena nula");
             }
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // factor ::= ID 
            {
              NodoBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t identificador"); 
             if(var != null){
                 RESULT = new NodoIdentificador(var.toString());
             } else {
                 RESULT = null;
                 System.out.println("Error: identificador nulo");
             }
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // factor ::= ID LBRACKET exp RBRACKET 
            {
              NodoBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase index = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(debug) System.out.println("\t acceso array"); 
             if(var != null){
                 RESULT = new NodoIdentificador(var.toString(), index);
             } else {
                 RESULT = null;
                 System.out.println("Error: identificador array nulo");
             }
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // factor ::= CALL ID LPAREN argument_list RPAREN 
            {
              NodoBase RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String func = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase args = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(debug) System.out.println("\t llamada funcion en expresion"); 
             RESULT = new NodoLlamadaFuncion(func.toString(), args);
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // factor ::= CALL ID LPAREN RPAREN 
            {
              NodoBase RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String func = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 if(debug) System.out.println("\t llamada funcion sin args en expresion"); 
             RESULT = new NodoLlamadaFuncion(func.toString());
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // factor ::= error 
            {
              NodoBase RESULT =null;
		 if(debug) System.out.println("\t error en factor"); 
             System.out.println("Error sintáctico en expresión");
             RESULT = null;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
